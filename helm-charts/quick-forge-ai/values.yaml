# Default values for quick-forge-ai.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# This will set the replicaset count more information can be found here: https://kubernetes.io/docs/concepts/workloads/controllers/replicaset/
replicaCount: 1

# This sets the container image more information can be found here: https://kubernetes.io/docs/concepts/containers/images/
image:
  repository: nginx
  # This sets the pull policy for images.
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: ""

# This is for the secretes for pulling an image from a private repository more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
imagePullSecrets: []
# This is to override the chart name.
nameOverride: ""
fullnameOverride: ""

# This section builds out the service account more information can be found here: https://kubernetes.io/docs/concepts/security/service-accounts/
serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Automatically mount a ServiceAccount's API credentials?
  automount: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

# This is for setting Kubernetes Annotations to a Pod.
# For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
podAnnotations: {}
# This is for setting Kubernetes Labels to a Pod.
# For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
podLabels: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

# This is for setting up a service more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/
service:
  # This sets the service type more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
  type: ClusterIP
  # This sets the ports more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/#field-spec-ports
  port: 80

# This block is for setting up the ingress for more information can be found here: https://kubernetes.io/docs/concepts/services-networking/ingress/
ingress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

# This is to setup the liveness and readiness probes more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/
livenessProbe:
  httpGet:
    path: /
    port: http
readinessProbe:
  httpGet:
    path: /
    port: http

# This section is for setting up autoscaling more information can be found here: https://kubernetes.io/docs/concepts/workloads/autoscaling/
autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

# Additional volumes on the output Deployment definition.
volumes: []
# - name: foo
#   secret:
#     secretName: mysecret
#     optional: false

# Additional volumeMounts on the output Deployment definition.
volumeMounts: []
# - name: foo
#   mountPath: "/etc/foo"
#   readOnly: true

nodeSelector: {}

tolerations: []

affinity: {}

global:
  # 环境配置
  env: production
  # 域名设置
  domain: example.com
  # Stack 名称
  stackName: qforge
  # 后端API地址
  apiUrl: "https://api.example.com"
  # 前端地址
  frontendHost: "https://dashboard.example.com"
  # 共享的镜像标签
  imageTag: latest
  # 共享的镜像仓库
  imageRepository: telepace
  
  # 共享的环境变量
  environment:
    # 数据库连接设置
    POSTGRES_USER: postgres
    POSTGRES_PASSWORD: ""
    POSTGRES_DB: app
    POSTGRES_PORT: 5432
    POSTGRES_SERVER: postgresql
    
    # 安全设置
    SECRET_KEY: ""
    
    # CORS 设置
    BACKEND_CORS_ORIGINS: '["http://localhost", "https://localhost", "http://localhost:8080", "https://localhost:8080", "http://dashboard.example.com", "https://dashboard.example.com"]'
    
    # 超级用户设置
    FIRST_SUPERUSER: admin@example.com
    FIRST_SUPERUSER_PASSWORD: ""
    
    # 邮件设置
    SMTP_HOST: ""
    SMTP_USER: ""
    SMTP_PASSWORD: ""
    EMAILS_FROM_EMAIL: info@example.com
    
    # Sentry 设置
    SENTRY_DSN: ""

# 后端服务配置
backend:
  enabled: true
  replicaCount: 1
  image:
    repository: "telepace/quick-forge-ai-backend"
    tag: "latest"
    pullPolicy: IfNotPresent
  
  service:
    type: ClusterIP
    port: 8000
  
  ingress:
    enabled: true
    annotations:
      kubernetes.io/ingress.class: nginx
      cert-manager.io/cluster-issuer: letsencrypt-prod
    hosts:
      - host: api.example.com
        paths:
          - path: /
            pathType: Prefix
    tls:
      - secretName: backend-tls
        hosts:
          - api.example.com
  
  resources:
    limits:
      cpu: 500m
      memory: 512Mi
    requests:
      cpu: 100m
      memory: 256Mi

# 前端配置
frontend:
  enabled: true
  replicaCount: 1
  image:
    repository: "telepace/quick-forge-ai-frontend"
    tag: "latest"
    pullPolicy: IfNotPresent
  
  buildArgs:
    VITE_API_URL: "https://api.example.com"
    NODE_ENV: production
  
  service:
    type: ClusterIP
    port: 80
  
  ingress:
    enabled: true
    annotations:
      kubernetes.io/ingress.class: nginx
      cert-manager.io/cluster-issuer: letsencrypt-prod
    hosts:
      - host: dashboard.example.com
        paths:
          - path: /
            pathType: Prefix
    tls:
      - secretName: frontend-tls
        hosts:
          - dashboard.example.com
  
  resources:
    limits:
      cpu: 300m
      memory: 256Mi
    requests:
      cpu: 100m
      memory: 128Mi

# 网站配置
website:
  enabled: true
  replicaCount: 1
  image:
    repository: "telepace/quick-forge-ai-website"
    tag: "latest"
    pullPolicy: IfNotPresent
  
  service:
    type: ClusterIP
    port: 3000
  
  ingress:
    enabled: true
    annotations:
      kubernetes.io/ingress.class: nginx
      cert-manager.io/cluster-issuer: letsencrypt-prod
    hosts:
      - host: docs.example.com
        paths:
          - path: /
            pathType: Prefix
    tls:
      - secretName: website-tls
        hosts:
          - docs.example.com
  
  resources:
    limits:
      cpu: 300m
      memory: 256Mi
    requests:
      cpu: 100m
      memory: 128Mi

# PostgreSQL 数据库配置
postgresql:
  enabled: true
  auth:
    username: postgres
    password: ""
    database: app
  primary:
    persistence:
      enabled: true
      size: 8Gi
  metrics:
    enabled: false
  
# 启用和配置 Adminer (可选)
adminer:
  enabled: false
  image:
    repository: adminer
    tag: latest
    pullPolicy: IfNotPresent
  service:
    type: ClusterIP
    port: 8080
  ingress:
    enabled: true
    annotations:
      kubernetes.io/ingress.class: nginx
      cert-manager.io/cluster-issuer: letsencrypt-prod
    hosts:
      - host: adminer.example.com
        paths:
          - path: /
            pathType: Prefix
    tls:
      - secretName: adminer-tls
        hosts:
          - adminer.example.com
