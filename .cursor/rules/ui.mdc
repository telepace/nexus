---
description: 
globs: 
alwaysApply: false
---
## 📙 Front-End Implementation Guide — v1.2

> **Scope** All React code in `frontend/` and `extension/`.
> **Stack** Tailwind CSS v4 · shadcn/ui · Radix UI · strict TypeScript.
> **Design Sources**
> • **Token CSS** → `frontend/app/globals.css`
> • **UI Library** → `frontend/components/ui/`
> No visual, typographic, motion, or layout rule may originate elsewhere.

---

### Directory & Path Aliases  ⬆️

```text
frontend/
├─ app/
│   ├─ globals.css
│   ├─ layout.tsx
│   └─ (routes)/…
├─ components/
│   ├─ ui/                  # Design-system components
│   └─ features/            # Business composites
├─ lib/                     # Utilities, i18n, helpers
└─ tailwind.config.ts
```

```jsonc
// tsconfig.json – excerpt
{
  "compilerOptions": {
    "baseUrl": ".",
    "paths": {
      "@/*": ["./*"],
      "@/ui/*": ["./frontend/components/ui/*"],
      "@/features/*": ["./frontend/components/features/*"],
      "@/lib/*": ["./frontend/lib/*"]
    }
  }
}
```

```js
// next.config.js – excerpt
module.exports = {
  webpack: cfg => {
    cfg.resolve.alias['@'] = require('path').resolve(__dirname, '.');
    return cfg;
  }
};
```

> Always import with an alias, e.g. `import { Button } from "@/ui";`

---

### 0 · Authoring Principles

1. **Single source of truth** – never duplicate CSS, variables, or components.
2. **Token-driven** – colors, spacing, fonts, radii, shadows come from `--*` tokens.
3. **Component-first** – compose existing UI-library parts; missing pieces → add to library first.
4. **Zero inline styles** (`style=` / `style={{…}}`).
5. **Tailwind utilities only** – complex rules belong in `@apply` classes inside token CSS.
6. **Dark mode** via `.dark`; never use `prefers-color-scheme`.

---

### 1 · Color & Semantics

* Tokens: `--color-background`, `--color-primary`, …
* Usage (JIT):

```tsx
className="bg-[oklch(var(--color-primary))] text-[oklch(var(--color-primary-foreground))]"
```

* Never hard-code `oklch()` / `hsl()` values.
* Charts → `--color-chart-1`…`-5`; loop if more needed.
* Sidebar/overlay → `--color-sidebar-*`.

---

### 2 · Typography

```tsx
<h1 className="text-4xl md:text-5xl font-bold leading-[var(--line-height-4xl)]">
  Dashboard
</h1>
<p className="text-base leading-[var(--line-height-base)] text-muted">
  Welcome back, Jane!
</p>
```

* Families: `font-sans`, `font-mono`.
* Heading scale: `h1`, `h2`, `h3` (see snippet).
* Helpers: `.text-lead`, `.text-large`, `.text-small`, `.text-muted`.

---

### 3 · Spacing & Layout

* **Core scale**: `--spacing-*`.
* **Page gutters**: `<md px-4 · md px-6 · lg+ px-8`.
* **Vertical rhythm**: paragraph `mt-4`; section `mt-12 md:mt-16`.
* **Grid**: 12-column fluid, max-width `lg:mx-auto max-w-[theme(screens.lg)]`.
* **Sidebar**: `w-64 md:w-72`, hidden in drawer on mobile.

#### Responsive two-column → one-column

```tsx
<div className="grid gap-6 lg:grid-cols-12">
  {/* Left column (lg = 4/12) */}
  <aside className="lg:col-span-4 space-y-6">
    <ProfileCard />
    <StatsCard />
  </aside>

  {/* Right column (lg = 8/12) */}
  <main className="lg:col-span-8 space-y-12">
    <Activities />
    <RecentTransactions />
  </main>
</div>
```

*< lg screens stack; `lg:` breakpoint activates split.*

#### Responsive three-column → two-column → one-column  ⬆️ *new*

```tsx
<div
  /* Mobile: single column
     md ≥ 768 px: two columns (8/12 + 4/12)
     lg ≥ 1024 px: three columns (4/12 each) */
  className="grid gap-6
             md:grid-cols-12
             lg:grid-cols-12"
>
  {/* Primary content – spans full on mobile, 8 cols on tablet, 4 cols on desktop */}
  <section className="md:col-span-8 lg:col-span-4 space-y-6">
    <ArticleList />
  </section>

  {/* Secondary content – 4 cols on tablet & desktop, hidden below md */}
  <aside className="hidden md:block md:col-span-4 lg:col-span-4 space-y-6">
    <TrendingTopics />
  </aside>

  {/* Tertiary content – only visible on lg, third column */}
  <aside className="hidden lg:block lg:col-span-4 space-y-6">
    <NewsletterSignup />
  </aside>
</div>
```

*Explanation*

* **Mobile (< md)** → one column (`grid-cols-1` implicit).
* **Tablet (md)** → two columns: 8/12 main + 4/12 secondary.
* **Desktop (lg)** → three equal 4/12 columns.

---

### 4 · Component Guidelines

#### 4.1 Button

```tsx
<Button variant="outline">Secondary</Button>
<Button variant="primary">Save</Button>
<Button variant="destructive" className="h-10 w-10 p-0" aria-label="Delete">
  <Trash className="h-5 w-5" />
  <span className="sr-only">Delete</span>
</Button>
```

* Default = outline; one **Primary** per view; **Destructive** for irreversible actions.

#### 4.2 Forms

* Focus ring → `focus-ring`.
* Field spacing → `space-y-4`; block gap `mt-8`.
* Error text:

```tsx
<span className="text-[oklch(var(--color-destructive))] text-sm mt-1">
  Password is too short
</span>
```

#### 4.3 Card

```tsx
<Card className="p-6 space-y-4 md:space-y-6">
  <CardHeader>Subscription</CardHeader>
  <CardBody>
    <PlanDetails />
  </CardBody>
</Card>
```

#### 4.4 Modal / Drawer

* Use `<Modal>` wrapper (Radix Dialog).
* Sizes: alert `sm:max-w-md`; form/wizard `sm:max-w-lg`.

---

### 5 · Motion & Performance

* **Animation tokens**: `ultrafast` → `ultraslow` (≤ 400 ms).
* Pre-defined keyframes: `accordion-up`, `accordion-down`, `spin`, `pulse`, `bounce`.
* Performance rules:

  * Animate `transform`/`opacity`; avoid `box-shadow`/`filter`.
  * Add `will-change: transform` for transforms > 120 ms.
  * Review loops > 400 ms.

```tsx
<div
  className="transition-transform duration-300 will-change-transform
             hover:translate-y-[-2px]"
>
  <Card />
</div>
```

---

### 6 · Accessibility (a11y)

* Focusable via `.focus-ring`.
* Labels: `htmlFor` + `id` or Radix `<Label>`.
* Live regions: `aria-live="polite"`.
* Images require `alt`.
* `axe-core` runs in tests.

---

### 7 · Checklist

1. No new `.css/.scss` or inline styles.
2. Colors/spacing/shadows from tokens.
3. Look in `@/ui` first; 

> **Remember** If the UI looks like it was built by different people, the guide is incomplete—file an issue and help refine it.
