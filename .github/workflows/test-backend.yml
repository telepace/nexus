name: Test Backend

on:
  push:
    branches:
      - main
  pull_request:
    types:
      - opened
      - synchronize
      - reopened
      - ready_for_review
jobs:
  test-backend:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install uv
        uses: astral-sh/setup-uv@v6
        with:
          version: "0.4.15"
          enable-cache: true

      - name: Copy example env file
        run: cp .env.example .env

      - name: Install Doppler CLI
        uses: dopplerhq/cli-action@v3

      - name: Setup Doppler
        run: |
          doppler setup --silent --project nexus --config stg
          doppler secrets download --no-file --format env > .env
          cp .env backend/.env
          STACK_NAME=$(doppler run -- printenv STACK_NAME)
          echo "STACK_NAME=$STACK_NAME" >> $GITHUB_ENV
        env:
          DOPPLER_TOKEN: ${{ secrets.DOPPLER_TOKEN_STAGING }}

      - run: docker compose --project-name $STACK_NAME down -v --remove-orphans
      - run: docker compose --project-name $STACK_NAME up -d db mailcatcher
      
      # Wait for database to be fully ready
      - name: Wait for database
        run: |
          echo "Waiting for database to be ready..."
          for i in {1..30}; do
            if docker compose --project-name $STACK_NAME exec -T db pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-app}; then
              echo "Database is ready!"
              break
            fi
            echo "Waiting for database... ($i/30)"
            sleep 2
          done
          # Additional wait to ensure database is fully initialized
          sleep 5
          
      - name: Install dependencies
        run: docker compose --project-name $STACK_NAME run --rm backend uv pip install -e .
      - name: Migrate DB
        run: docker compose --project-name $STACK_NAME run --rm -e TESTING=true -e TEST_MODE=true backend uv run bash scripts/prestart.sh
        working-directory: backend

      - name: Run tests
<<<<<<< HEAD
        run: |
          # Set test environment variables to ensure consistency
          export TESTING=true
          export TEST_MODE=true
          export FIRST_SUPERUSER_PASSWORD=telepace
          export FIRST_SUPERUSER=admin@telepace.cc
          docker compose --project-name $STACK_NAME run --rm backend uv run bash scripts/tests-start.sh "Coverage for ${{ github.sha }}"
        working-directory: backend
<<<<<<< HEAD
        timeout-minutes: 20
=======
        env:
          TESTING: "true"
          TEST_MODE: "true"
>>>>>>> 0a834ae (chore: update test-backend workflow to enable testing environment variables)
=======
        run: docker compose --project-name $STACK_NAME run --rm -e TESTING=true -e TEST_MODE=true backend uv run bash scripts/tests-start.sh "Coverage for ${{ github.sha }}"
        working-directory: backend
>>>>>>> 1d6b4c6 (chore: improve test scripts for CI environment detection)
      - run: docker compose --project-name $STACK_NAME down -v --remove-orphans
      - name: Store coverage files
        uses: actions/upload-artifact@v4
        with:
          name: coverage-html
          path: backend/htmlcov
          include-hidden-files: true
