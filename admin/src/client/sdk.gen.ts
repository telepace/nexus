// This file is auto-generated by @hey-api/openapi-ts

import type { CancelablePromise } from './core/CancelablePromise';
import { OpenAPI } from './core/OpenAPI';
import { request as __request } from './core/request';
import type { ContentCreateContentItemEndpointData, ContentCreateContentItemEndpointResponse, ContentProcessContentItemEndpointData, ContentProcessContentItemEndpointResponse, ContentListContentItemsEndpointData, ContentListContentItemsEndpointResponse, ContentGetContentItemEndpointData, ContentGetContentItemEndpointResponse, ContentGetContentMarkdownEndpointData, ContentGetContentMarkdownEndpointResponse, ContentGetSupportedProcessorsResponse, ContentGetContentChunksEndpointData, ContentGetContentChunksEndpointResponse, ContentGetContentChunksSummaryEndpointData, ContentGetContentChunksSummaryEndpointResponse, ContentAnalyzeContentStreamData, ContentAnalyzeContentStreamResponse, GoogleOauthGoogleCallbackApiData, GoogleOauthGoogleCallbackApiResponse, GoogleOauthGoogleLoginData, GoogleOauthGoogleLoginResponse, GoogleOauthGoogleCallbackData, GoogleOauthGoogleCallbackResponse, HealthGetHealthApiResponse, ImagesGetUploadUrlData, ImagesGetUploadUrlResponse, ImagesCreateImageRecordData, ImagesCreateImageRecordResponse, ImagesListImagesData, ImagesListImagesResponse, ImagesReadImageData, ImagesReadImageResponse, ImagesDeleteImageData, ImagesDeleteImageResponse, ItemsReadItemsData, ItemsReadItemsResponse, ItemsCreateItemData, ItemsCreateItemResponse, ItemsReadItemData, ItemsReadItemResponse, ItemsUpdateItemData, ItemsUpdateItemResponse, ItemsDeleteItemData, ItemsDeleteItemResponse, LlmCreateCompletionData, LlmCreateCompletionResponse, LlmCreateEmbeddingData, LlmCreateEmbeddingResponse, LoginLoginAccessTokenData, LoginLoginAccessTokenResponse, LoginLoginAccessTokenHeadResponse, LoginTestTokenResponse, LoginLogoutResponse, LoginRecoverPasswordData, LoginRecoverPasswordResponse, LoginResetPasswordData, LoginResetPasswordResponse, LoginRecoverPasswordHtmlContentData, LoginRecoverPasswordHtmlContentResponse, PrivateCreateUserData, PrivateCreateUserResponse, PromptsReadTagsData, PromptsReadTagsResponse, PromptsCreateTagData, PromptsCreateTagResponse, PromptsUpdateTagData, PromptsUpdateTagResponse, PromptsDeleteTagData, PromptsDeleteTagResponse, PromptsCreatePromptData, PromptsCreatePromptResponse, PromptsReadPromptsData, PromptsReadPromptsResponse, PromptsReadPromptData, PromptsReadPromptResponse, PromptsUpdatePromptData, PromptsUpdatePromptResponse, PromptsDeletePromptData, PromptsDeletePromptResponse, PromptsReadPromptVersionsData, PromptsReadPromptVersionsResponse, PromptsCreatePromptVersionData, PromptsCreatePromptVersionResponse, PromptsReadPromptVersionData, PromptsReadPromptVersionResponse, PromptsDuplicatePromptData, PromptsDuplicatePromptResponse, PromptsTogglePromptEnabledData, PromptsTogglePromptEnabledResponse, UsersReadUsersData, UsersReadUsersResponse, UsersCreateUserData, UsersCreateUserResponse, UsersReadUserMeResponse, UsersDeleteUserMeResponse, UsersReadUserMeHeadResponse, UsersUpdateUserMeData, UsersUpdateUserMeResponse, UsersUpdatePasswordMeData, UsersUpdatePasswordMeResponse, UsersRegisterUserData, UsersRegisterUserResponse, UsersReadUserByIdData, UsersReadUserByIdResponse, UsersUpdateUserData, UsersUpdateUserResponse, UsersDeleteUserData, UsersDeleteUserResponse, UtilsTestEmailData, UtilsTestEmailResponse, UtilsHealthCheckResponse } from './types.gen';

export class ContentService {
    /**
     * Create a New Content Item
     * Uploads and creates a new content item in the system. Requires user authentication.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns ContentItemPublic Successful Response
     * @throws ApiError
     */
    public static createContentItemEndpoint(data: ContentCreateContentItemEndpointData): CancelablePromise<ContentCreateContentItemEndpointResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/content/create',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Process Content Item
     * Process a content item to convert it to Markdown format using appropriate processor.
     * @param data The data for the request.
     * @param data.id
     * @returns ContentItemPublic Successful Response
     * @throws ApiError
     */
    public static processContentItemEndpoint(data: ContentProcessContentItemEndpointData): CancelablePromise<ContentProcessContentItemEndpointResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/content/process/{id}',
            path: {
                id: data.id
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * List Content Items
     * Retrieves a list of content items for the authenticated user, with optional pagination.
     * @param data The data for the request.
     * @param data.skip Number of items to skip for pagination.
     * @param data.limit Maximum number of items to return.
     * @returns ContentItemPublic Successful Response
     * @throws ApiError
     */
    public static listContentItemsEndpoint(data: ContentListContentItemsEndpointData = {}): CancelablePromise<ContentListContentItemsEndpointResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/content/',
            query: {
                skip: data.skip,
                limit: data.limit
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Get a Specific Content Item
     * Retrieves a single content item by its unique ID. User can only access their own content.
     * @param data The data for the request.
     * @param data.id
     * @returns ContentItemPublic Successful Response
     * @throws ApiError
     */
    public static getContentItemEndpoint(data: ContentGetContentItemEndpointData): CancelablePromise<ContentGetContentItemEndpointResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/content/{id}',
            path: {
                id: data.id
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Get Content Item as Markdown
     * Retrieves the processed markdown content for a content item. Returns raw markdown text.
     * @param data The data for the request.
     * @param data.id
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static getContentMarkdownEndpoint(data: ContentGetContentMarkdownEndpointData): CancelablePromise<ContentGetContentMarkdownEndpointResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/content/{id}/markdown',
            path: {
                id: data.id
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Get Supported Content Types
     * Get list of supported content types and their processors.
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static getSupportedProcessors(): CancelablePromise<ContentGetSupportedProcessorsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/content/processors/supported'
        });
    }
    
    /**
     * Get Content Chunks
     * Retrieves content chunks for efficient rendering with pagination support.
     * @param data The data for the request.
     * @param data.id
     * @param data.page Page number (1-based)
     * @param data.size Number of chunks per page
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static getContentChunksEndpoint(data: ContentGetContentChunksEndpointData): CancelablePromise<ContentGetContentChunksEndpointResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/content/{id}/chunks',
            path: {
                id: data.id
            },
            query: {
                page: data.page,
                size: data.size
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Get Content Chunks Summary
     * Get summary information about content chunks without the actual content.
     * @param data The data for the request.
     * @param data.id
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static getContentChunksSummaryEndpoint(data: ContentGetContentChunksSummaryEndpointData): CancelablePromise<ContentGetContentChunksSummaryEndpointResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/content/{id}/chunks/summary',
            path: {
                id: data.id
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Analyze Content Stream
     * Stream AI analysis of content using LiteLLM.
     *
     * Args:
     * content_id: ID of the content to analyze
     * system_prompt: System prompt (e.g., prompt template)
     * user_prompt: User prompt (the actual content text)
     * current_user: Current authenticated user
     * db: Database session
     *
     * Returns:
     * StreamingResponse: Server-sent events with analysis chunks
     * @param data The data for the request.
     * @param data.contentId
     * @param data.requestBody
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static analyzeContentStream(data: ContentAnalyzeContentStreamData): CancelablePromise<ContentAnalyzeContentStreamResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/content/{content_id}/analyze',
            path: {
                content_id: data.contentId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
}

export class GoogleOauthService {
    /**
     * Google Callback Api
     * Handle Google OAuth callback from frontend
     * This is maintained for backward compatibility but not used in the new flow
     * @param data The data for the request.
     * @param data.requestBody
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static googleCallbackApi(data: GoogleOauthGoogleCallbackApiData): CancelablePromise<GoogleOauthGoogleCallbackApiResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/auth/google-callback',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Google Login
     * Initiate Google OAuth2 authentication flow
     * This endpoint redirects to Google's login page
     * @param data The data for the request.
     * @param data.extensionCallback
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static googleLogin(data: GoogleOauthGoogleLoginData = {}): CancelablePromise<GoogleOauthGoogleLoginResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/login/google',
            query: {
                extension_callback: data.extensionCallback
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Google Callback
     * Handle the callback from Google OAuth
     * This endpoint is called by Google after the user has logged in
     * @param data The data for the request.
     * @param data.code
     * @param data.state
     * @param data.error
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static googleCallback(data: GoogleOauthGoogleCallbackData = {}): CancelablePromise<GoogleOauthGoogleCallbackResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/login/google/callback',
            query: {
                code: data.code,
                state: data.state,
                error: data.error
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
}

export class HealthService {
    /**
     * Get Health Api
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static getHealthApi(): CancelablePromise<HealthGetHealthApiResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/health'
        });
    }
    
}

export class ImagesService {
    /**
     * Get a presigned URL for uploading a file to S3/R2-compatible storage.
     * Get a presigned URL that can be used to upload a file directly to the storage.
     * The `s3_key` returned is the path in the bucket where the file should be uploaded.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns PresignedURLResponse Successful Response
     * @throws ApiError
     */
    public static getUploadUrl(data: ImagesGetUploadUrlData): CancelablePromise<ImagesGetUploadUrlResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/images/upload-url',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Create a new image record.
     * After uploading a file using a presigned URL, call this endpoint to create the image metadata in the database.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns ImageResponse Successful Response
     * @throws ApiError
     */
    public static createImageRecord(data: ImagesCreateImageRecordData): CancelablePromise<ImagesCreateImageRecordResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/images/',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * List images for the current user.
     * Retrieve a list of images owned by the current user.
     * @param data The data for the request.
     * @param data.skip
     * @param data.limit
     * @returns ImageResponse Successful Response
     * @throws ApiError
     */
    public static listImages(data: ImagesListImagesData = {}): CancelablePromise<ImagesListImagesResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/images/',
            query: {
                skip: data.skip,
                limit: data.limit
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Get an image by its ID.
     * Get a specific image by its ID.
     * Users can only retrieve images they own.
     * @param data The data for the request.
     * @param data.imageId
     * @returns ImageResponse Successful Response
     * @throws ApiError
     */
    public static readImage(data: ImagesReadImageData): CancelablePromise<ImagesReadImageResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/images/{image_id}',
            path: {
                image_id: data.imageId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Delete an image.
     * Delete an image:
     * - Deletes the file from S3/R2 storage.
     * - Deletes the image metadata from the database.
     * Users can only delete images they own.
     * @param data The data for the request.
     * @param data.imageId
     * @returns ImageResponse Successful Response
     * @throws ApiError
     */
    public static deleteImage(data: ImagesDeleteImageData): CancelablePromise<ImagesDeleteImageResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/v1/images/{image_id}',
            path: {
                image_id: data.imageId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
}

export class ItemsService {
    /**
     * Read Items
     * Retrieve items.
     * @param data The data for the request.
     * @param data.skip
     * @param data.limit
     * @returns ApiResponse_ItemsPublic_ Successful Response
     * @throws ApiError
     */
    public static readItems(data: ItemsReadItemsData = {}): CancelablePromise<ItemsReadItemsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/items/',
            query: {
                skip: data.skip,
                limit: data.limit
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Create Item
     * Create new item.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns ApiResponse_ItemPublic_ Successful Response
     * @throws ApiError
     */
    public static createItem(data: ItemsCreateItemData): CancelablePromise<ItemsCreateItemResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/items/',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Read Item
     * Get item by ID.
     * @param data The data for the request.
     * @param data.id
     * @returns ApiResponse_ItemPublic_ Successful Response
     * @throws ApiError
     */
    public static readItem(data: ItemsReadItemData): CancelablePromise<ItemsReadItemResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/items/{id}',
            path: {
                id: data.id
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Update Item
     * Update an item.
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody
     * @returns ApiResponse_ItemPublic_ Successful Response
     * @throws ApiError
     */
    public static updateItem(data: ItemsUpdateItemData): CancelablePromise<ItemsUpdateItemResponse> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/api/v1/items/{id}',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Delete Item
     * Delete an item.
     * @param data The data for the request.
     * @param data.id
     * @returns ApiResponse_NoneType_ Successful Response
     * @throws ApiError
     */
    public static deleteItem(data: ItemsDeleteItemData): CancelablePromise<ItemsDeleteItemResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/v1/items/{id}',
            path: {
                id: data.id
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
}

export class LlmService {
    /**
     * Create Completion
     * Handles creation of completions based on request data.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static createCompletion(data: LlmCreateCompletionData): CancelablePromise<LlmCreateCompletionResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/llm/completions',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Create Embedding
     * Handles the creation of embeddings by forwarding a request to LiteLLM.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns EmbeddingResponse Successful Response
     * @throws ApiError
     */
    public static createEmbedding(data: LlmCreateEmbeddingData): CancelablePromise<LlmCreateEmbeddingResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/llm/embeddings',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
}

export class LoginService {
    /**
     * Login Access Token
     * OAuth2 compatible token login, get an access token for future requests
     * @param data The data for the request.
     * @param data.formData
     * @returns Token Successful Response
     * @throws ApiError
     */
    public static loginAccessToken(data: LoginLoginAccessTokenData): CancelablePromise<LoginLoginAccessTokenResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/login/access-token',
            formData: data.formData,
            mediaType: 'application/x-www-form-urlencoded',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Login Access Token Head
     * HEAD request for login endpoint - used by browser extensions to check API availability
     * Returns basic headers without body
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static loginAccessTokenHead(): CancelablePromise<LoginLoginAccessTokenHeadResponse> {
        return __request(OpenAPI, {
            method: 'HEAD',
            url: '/api/v1/login/access-token'
        });
    }
    
    /**
     * Test Token
     * Test access token
     * @returns UserPublic Successful Response
     * @throws ApiError
     */
    public static testToken(): CancelablePromise<LoginTestTokenResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/login/test-token'
        });
    }
    
    /**
     * Logout
     * Logout current user
     *
     * This endpoint invalidates the current token by adding it to a blacklist.
     * The frontend should still remove the tokens from local storage after calling this endpoint.
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static logout(): CancelablePromise<LoginLogoutResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/logout'
        });
    }
    
    /**
     * Recover Password
     * Password Recovery
     * @param data The data for the request.
     * @param data.email
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static recoverPassword(data: LoginRecoverPasswordData): CancelablePromise<LoginRecoverPasswordResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/password-recovery/{email}',
            path: {
                email: data.email
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Reset Password
     * Reset password
     * @param data The data for the request.
     * @param data.requestBody
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static resetPassword(data: LoginResetPasswordData): CancelablePromise<LoginResetPasswordResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/reset-password/',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Recover Password Html Content
     * HTML Content for Password Recovery
     * @param data The data for the request.
     * @param data.email
     * @returns string Successful Response
     * @throws ApiError
     */
    public static recoverPasswordHtmlContent(data: LoginRecoverPasswordHtmlContentData): CancelablePromise<LoginRecoverPasswordHtmlContentResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/password-recovery-html-content/{email}',
            path: {
                email: data.email
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
}

export class PrivateService {
    /**
     * Create User
     * Create a new user.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns UserPublic Successful Response
     * @throws ApiError
     */
    public static createUser(data: PrivateCreateUserData): CancelablePromise<PrivateCreateUserResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/private/users/',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
}

export class PromptsService {
    /**
     * Read Tags
     * 获取标签列表
     * @param data The data for the request.
     * @param data.skip
     * @param data.limit
     * @returns Tag Successful Response
     * @throws ApiError
     */
    public static readTags(data: PromptsReadTagsData = {}): CancelablePromise<PromptsReadTagsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/prompts/tags',
            query: {
                skip: data.skip,
                limit: data.limit
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Create Tag
     * 创建新标签
     * @param data The data for the request.
     * @param data.requestBody
     * @returns Tag Successful Response
     * @throws ApiError
     */
    public static createTag(data: PromptsCreateTagData): CancelablePromise<PromptsCreateTagResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/prompts/tags',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Update Tag
     * 更新标签
     * @param data The data for the request.
     * @param data.tagId
     * @param data.requestBody
     * @returns Tag Successful Response
     * @throws ApiError
     */
    public static updateTag(data: PromptsUpdateTagData): CancelablePromise<PromptsUpdateTagResponse> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/api/v1/prompts/tags/{tag_id}',
            path: {
                tag_id: data.tagId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Delete Tag
     * 删除标签 (需要超级用户权限)
     * @param data The data for the request.
     * @param data.tagId
     * @returns void Successful Response
     * @throws ApiError
     */
    public static deleteTag(data: PromptsDeleteTagData): CancelablePromise<PromptsDeleteTagResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/v1/prompts/tags/{tag_id}',
            path: {
                tag_id: data.tagId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Create Prompt
     * 创建新的提示词
     * @param data The data for the request.
     * @param data.requestBody
     * @returns PromptReadWithTags Successful Response
     * @throws ApiError
     */
    public static createPrompt(data: PromptsCreatePromptData): CancelablePromise<PromptsCreatePromptResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/prompts/',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Read Prompts
     * Read and return a list of prompts based on specified filters and sorting.
     *
     * The function constructs a query to retrieve prompts from the database, applying
     * optional filters for tag IDs, search terms, and sorting by creation or update
     * time. It also handles pagination through skip and limit parameters. Tags are
     * manually loaded for each prompt after querying.
     *
     * Args:
     * db (Session): Database session.
     * _current_user (Any): Current user information (dependency).
     * skip (int?): Number of records to skip. Defaults to 0.
     * limit (int?): Maximum number of records to return. Defaults to 100.
     * tag_ids (list[UUID] | None?): List of UUIDs for tags to filter prompts by.
     * search (str | None?): Search term to filter prompts by name, description, or content.
     * sort (str | None?): Field to sort the results by ('created_at' or 'updated_at'). Defaults to None.
     * order (str?): Order of sorting ('asc' or 'desc'). Defaults to "desc".
     *
     * Returns:
     * list[Prompt]: List of prompts matching the filters and sorted as specified.
     *
     * Raises:
     * HTTPException: If an error occurs during database query execution.
     * @param data The data for the request.
     * @param data.skip
     * @param data.limit
     * @param data.tagIds
     * @param data.search
     * @param data.sort
     * @param data.order
     * @returns Prompt Successful Response
     * @throws ApiError
     */
    public static readPrompts(data: PromptsReadPromptsData = {}): CancelablePromise<PromptsReadPromptsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/prompts/',
            query: {
                skip: data.skip,
                limit: data.limit,
                tag_ids: data.tagIds,
                search: data.search,
                sort: data.sort,
                order: data.order
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Read Prompt
     * 获取提示词详情
     * @param data The data for the request.
     * @param data.promptId
     * @returns PromptReadWithTags Successful Response
     * @throws ApiError
     */
    public static readPrompt(data: PromptsReadPromptData): CancelablePromise<PromptsReadPromptResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/prompts/{prompt_id}',
            path: {
                prompt_id: data.promptId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Update Prompt
     * Update a prompt by its ID.
     *
     * This function updates the prompt in the database with new data provided. It
     * checks for permissions, updates other fields, and handles version creation if
     * specified. It also manages tag relationships by updating or clearing them as
     * needed.
     *
     * Args:
     * db (Session): The database session.
     * prompt_id (UUID): The ID of the prompt to update.
     * prompt_in (PromptUpdate): The data containing the new values for the prompt.
     * current_user (Any): The current user making the request.
     * create_version (bool): A flag indicating whether to create a new version.
     *
     * Returns:
     * PromptReadWithTags: The updated prompt with tags included.
     *
     * Raises:
     * HTTPException: If the prompt is not found, the user lacks permissions,
     * or an error occurs during the update process.
     * @param data The data for the request.
     * @param data.promptId
     * @param data.requestBody
     * @param data.createVersion
     * @returns PromptReadWithTags Successful Response
     * @throws ApiError
     */
    public static updatePrompt(data: PromptsUpdatePromptData): CancelablePromise<PromptsUpdatePromptResponse> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/api/v1/prompts/{prompt_id}',
            path: {
                prompt_id: data.promptId
            },
            query: {
                create_version: data.createVersion
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Delete Prompt
     * 删除提示词
     * @param data The data for the request.
     * @param data.promptId
     * @returns void Successful Response
     * @throws ApiError
     */
    public static deletePrompt(data: PromptsDeletePromptData): CancelablePromise<PromptsDeletePromptResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/v1/prompts/{prompt_id}',
            path: {
                prompt_id: data.promptId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Read Prompt Versions
     * Retrieves the version history of a given prompt.
     *
     * This function fetches the version history for a specified prompt by its ID. It
     * first retrieves the prompt from the database and checks if it exists. Then, it
     * verifies the user's permissions to access the prompt. If both steps are
     * successful, it queries the database to get all versions of the prompt, sorted
     * in descending order by version number. If any errors occur during this process,
     * appropriate HTTP exceptions are raised.
     *
     * Args:
     * db (Session): The database session.
     * prompt_id (UUID): The ID of the prompt for which to retrieve version history.
     * current_user (Any): The current authenticated user.
     * @param data The data for the request.
     * @param data.promptId
     * @returns PromptVersion Successful Response
     * @throws ApiError
     */
    public static readPromptVersions(data: PromptsReadPromptVersionsData): CancelablePromise<PromptsReadPromptVersionsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/prompts/{prompt_id}/versions',
            path: {
                prompt_id: data.promptId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Create Prompt Version
     * Creates a new version of a prompt.
     *
     * This function retrieves the prompt by its ID, checks for access permissions,
     * determines the maximum existing version number, and then creates a new version
     * with incremented version number, content, change notes, creation time, and
     * creator ID. It handles exceptions by logging errors and raising HTTP
     * exceptions.
     * @param data The data for the request.
     * @param data.promptId
     * @param data.requestBody
     * @returns PromptVersion Successful Response
     * @throws ApiError
     */
    public static createPromptVersion(data: PromptsCreatePromptVersionData): CancelablePromise<PromptsCreatePromptVersionResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/prompts/{prompt_id}/versions',
            path: {
                prompt_id: data.promptId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Read Prompt Version
     * 获取提示词特定版本
     * @param data The data for the request.
     * @param data.promptId
     * @param data.versionNum
     * @returns PromptVersion Successful Response
     * @throws ApiError
     */
    public static readPromptVersion(data: PromptsReadPromptVersionData): CancelablePromise<PromptsReadPromptVersionResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/prompts/{prompt_id}/versions/{version_num}',
            path: {
                prompt_id: data.promptId,
                version_num: data.versionNum
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Duplicate Prompt
     * Duplicates a prompt based on the provided prompt ID.
     *
     * This function retrieves the original prompt, checks for access permissions,
     * creates a new duplicate with updated attributes such as name and visibility,
     * copies associated tags, and initializes a new version for the duplicated
     * prompt. If any errors occur during the process, it rolls back the database
     * transaction and raises an appropriate HTTP exception.
     *
     * Args:
     * db (Session): The database session dependency.
     * prompt_id (UUID): The ID of the original prompt to be duplicated.
     * current_user (Any): The current user making the request.
     * @param data The data for the request.
     * @param data.promptId
     * @returns Prompt Successful Response
     * @throws ApiError
     */
    public static duplicatePrompt(data: PromptsDuplicatePromptData): CancelablePromise<PromptsDuplicatePromptResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/prompts/{prompt_id}/duplicate',
            path: {
                prompt_id: data.promptId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Toggle Prompt Enabled
     * 快速切换提示词的启用状态
     * @param data The data for the request.
     * @param data.promptId
     * @returns PromptReadWithTags Successful Response
     * @throws ApiError
     */
    public static togglePromptEnabled(data: PromptsTogglePromptEnabledData): CancelablePromise<PromptsTogglePromptEnabledResponse> {
        return __request(OpenAPI, {
            method: 'PATCH',
            url: '/api/v1/prompts/{prompt_id}/toggle-enabled',
            path: {
                prompt_id: data.promptId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
}

export class UsersService {
    /**
     * Read Users
     * Retrieve users.
     * @param data The data for the request.
     * @param data.skip
     * @param data.limit
     * @returns UsersPublic Successful Response
     * @throws ApiError
     */
    public static readUsers(data: UsersReadUsersData = {}): CancelablePromise<UsersReadUsersResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/users/',
            query: {
                skip: data.skip,
                limit: data.limit
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Create User
     * Create new user.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns UserPublic Successful Response
     * @throws ApiError
     */
    public static createUser(data: UsersCreateUserData): CancelablePromise<UsersCreateUserResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/users/',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Read User Me
     * Get current user.
     * @returns UserPublic Successful Response
     * @throws ApiError
     */
    public static readUserMe(): CancelablePromise<UsersReadUserMeResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/users/me'
        });
    }
    
    /**
     * Delete User Me
     * Delete own user.
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static deleteUserMe(): CancelablePromise<UsersDeleteUserMeResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/v1/users/me'
        });
    }
    
    /**
     * Read User Me Head
     * HEAD request for user info endpoint - used by browser extensions to check token validity
     * Returns headers without body
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static readUserMeHead(): CancelablePromise<UsersReadUserMeHeadResponse> {
        return __request(OpenAPI, {
            method: 'HEAD',
            url: '/api/v1/users/me'
        });
    }
    
    /**
     * Update User Me
     * Update own user.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns UserPublic Successful Response
     * @throws ApiError
     */
    public static updateUserMe(data: UsersUpdateUserMeData): CancelablePromise<UsersUpdateUserMeResponse> {
        return __request(OpenAPI, {
            method: 'PATCH',
            url: '/api/v1/users/me',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Update Password Me
     * Update own password.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static updatePasswordMe(data: UsersUpdatePasswordMeData): CancelablePromise<UsersUpdatePasswordMeResponse> {
        return __request(OpenAPI, {
            method: 'PATCH',
            url: '/api/v1/users/me/password',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Register User
     * Create new user without the need to be logged in.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns UserPublic Successful Response
     * @throws ApiError
     */
    public static registerUser(data: UsersRegisterUserData): CancelablePromise<UsersRegisterUserResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/users/signup',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Read User By Id
     * Get a specific user by id.
     * @param data The data for the request.
     * @param data.userId
     * @returns UserPublic Successful Response
     * @throws ApiError
     */
    public static readUserById(data: UsersReadUserByIdData): CancelablePromise<UsersReadUserByIdResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/users/{user_id}',
            path: {
                user_id: data.userId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Update User
     * Update a user.
     * @param data The data for the request.
     * @param data.userId
     * @param data.requestBody
     * @returns UserPublic Successful Response
     * @throws ApiError
     */
    public static updateUser(data: UsersUpdateUserData): CancelablePromise<UsersUpdateUserResponse> {
        return __request(OpenAPI, {
            method: 'PATCH',
            url: '/api/v1/users/{user_id}',
            path: {
                user_id: data.userId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Delete User
     * Delete a user.
     * @param data The data for the request.
     * @param data.userId
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static deleteUser(data: UsersDeleteUserData): CancelablePromise<UsersDeleteUserResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/v1/users/{user_id}',
            path: {
                user_id: data.userId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
}

export class UtilsService {
    /**
     * Test Email
     * Test emails.
     * @param data The data for the request.
     * @param data.emailTo
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static testEmail(data: UtilsTestEmailData): CancelablePromise<UtilsTestEmailResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/utils/test-email/',
            query: {
                email_to: data.emailTo
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Health Check
     * @returns boolean Successful Response
     * @throws ApiError
     */
    public static healthCheck(): CancelablePromise<UtilsHealthCheckResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/utils/health-check/'
        });
    }
    
}