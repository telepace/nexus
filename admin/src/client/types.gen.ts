// This file is auto-generated by @hey-api/openapi-ts

export type ApiResponse_ItemPublic_ = {
    data?: (unknown | null);
    meta?: ({
    [key: string]: unknown;
} | null);
    error?: (string | null);
};

export type ApiResponse_ItemsPublic_ = {
    data?: (unknown | null);
    meta?: ({
    [key: string]: unknown;
} | null);
    error?: (string | null);
};

export type ApiResponse_NoneType_ = {
    data?: (unknown | null);
    meta?: ({
    [key: string]: unknown;
} | null);
    error?: (string | null);
};

export type Body_content_analyze_content_stream = {
    /**
     * System prompt for analysis
     */
    system_prompt: string;
    /**
     * User prompt (content text)
     */
    user_prompt: string;
};

export type Body_login_login_access_token = {
    grant_type?: (string | null);
    username: string;
    password: string;
    scope?: string;
    client_id?: (string | null);
    client_secret?: (string | null);
};

export type CompletionRequest = {
    model?: (string | null);
    messages: Array<LLMMessage>;
    temperature?: (number | null);
    max_tokens?: (number | null);
    stream?: (boolean | null);
    top_p?: (number | null);
    stop?: (string | Array<(string)> | null);
    presence_penalty?: (number | null);
    frequency_penalty?: (number | null);
    logit_bias?: ({
    [key: string]: (number);
} | null);
    user?: (string | null);
    metadata?: ({
    [key: string]: (string);
} | null);
    api_key?: (string | null);
};

export type ContentItemCreate = {
    type: string;
    source_uri?: (string | null);
    title?: (string | null);
    summary?: (string | null);
    content_text?: (string | null);
};

export type ContentItemPublic = {
    type: string;
    source_uri?: (string | null);
    title?: (string | null);
    summary?: (string | null);
    id: string;
    user_id: string;
    processing_status: string;
    content_text?: (string | null);
    created_at: string;
    updated_at: string;
};

export type EmbeddingData = {
    object: string;
    embedding: Array<(number)>;
    index: number;
};

export type EmbeddingRequest = {
    input: (string | Array<(string)>);
    model: string;
    user?: (string | null);
    api_key?: (string | null);
};

export type EmbeddingResponse = {
    object: string;
    data: Array<EmbeddingData>;
    model: string;
    usage: EmbeddingUsage;
};

export type EmbeddingUsage = {
    prompt_tokens: number;
    total_tokens: number;
};

export type GoogleCallbackRequest = {
    token: string;
    user_info: {
        [key: string]: unknown;
    };
};

export type HTTPValidationError = {
    detail?: Array<ValidationError>;
};

export type InputVariable = {
    name: string;
    description?: (string | null);
    required?: boolean;
};

export type ItemCreate = {
    title: string;
    description?: (string | null);
};

export type ItemUpdate = {
    title?: (string | null);
    description?: (string | null);
};

export type LLMMessage = {
    role: string;
    content: string;
};

export type Message = {
    message: string;
};

export type NewPassword = {
    token: string;
    new_password: string;
};

export type PrivateUserCreate = {
    email: string;
    password: string;
    full_name: string;
    is_verified?: boolean;
};

export type Prompt = {
    name: string;
    description?: (string | null);
    content: string;
    type: PromptType;
    input_vars?: (Array<InputVariable> | null);
    visibility: Visibility;
    meta_data?: ({
    [key: string]: unknown;
} | null);
    version?: number;
    /**
     * 是否启用该提示词
     */
    enabled?: boolean;
    team_id?: (string | null);
    id?: string;
    created_at?: string;
    updated_at?: string;
    embedding?: (Array<(number)> | null);
    created_by: string;
};

export type PromptCreate = {
    name: string;
    description?: (string | null);
    content: string;
    type: PromptType;
    input_vars?: (Array<InputVariable> | null);
    visibility: Visibility;
    meta_data?: ({
    [key: string]: unknown;
} | null);
    version?: number;
    /**
     * 是否启用该提示词
     */
    enabled?: boolean;
    team_id?: (string | null);
    tag_ids?: (Array<(string)> | null);
};

export type PromptReadWithTags = {
    name: string;
    description?: (string | null);
    content: string;
    type: PromptType;
    input_vars?: (Array<InputVariable> | null);
    visibility: Visibility;
    meta_data?: ({
    [key: string]: unknown;
} | null);
    version?: number;
    /**
     * 是否启用该提示词
     */
    enabled?: boolean;
    team_id?: (string | null);
    id: string;
    created_by: string;
    created_at: string;
    updated_at: string;
    embedding?: (Array<(number)> | null);
    tags?: Array<Tag>;
};

export type PromptType = 'simple' | 'chat' | 'template' | 'system' | 'function';

export type PromptUpdate = {
    name?: (string | null);
    description?: (string | null);
    content?: (string | null);
    type?: (PromptType | null);
    input_vars?: (Array<InputVariable> | null);
    visibility?: (Visibility | null);
    team_id?: (string | null);
    meta_data?: ({
    [key: string]: unknown;
} | null);
    enabled?: (boolean | null);
    tag_ids?: (Array<(string)> | null);
};

export type PromptVersion = {
    id?: string;
    prompt_id: string;
    version: number;
    content: string;
    input_vars?: (Array<InputVariable> | null);
    created_by: string;
    created_at?: string;
    change_notes?: (string | null);
};

export type PromptVersionCreate = {
    content: string;
    input_vars?: (Array<InputVariable> | null);
    change_notes?: (string | null);
};

export type Tag = {
    id?: string;
    name: string;
    description?: (string | null);
    color?: (string | null);
    created_at?: string;
};

export type TagCreate = {
    name: string;
    description?: (string | null);
    color?: (string | null);
};

export type TagUpdate = {
    name?: (string | null);
    description?: (string | null);
    color?: (string | null);
};

export type Token = {
    access_token: string;
    token_type?: string;
};

export type UpdatePassword = {
    current_password: string;
    new_password: string;
};

export type UserCreate = {
    email?: string;
    is_active?: boolean;
    is_superuser?: boolean;
    full_name?: (string | null);
    avatar_url?: (string | null);
    is_setup_complete?: boolean;
    password: string;
};

export type UserPublic = {
    email?: string;
    is_active?: boolean;
    is_superuser?: boolean;
    full_name?: (string | null);
    avatar_url?: (string | null);
    is_setup_complete?: boolean;
    id: string;
};

export type UserRegister = {
    email: string;
    password: string;
    full_name?: (string | null);
};

export type UsersPublic = {
    data: Array<UserPublic>;
    count: number;
};

export type UserUpdate = {
    email?: (string | null);
    is_active?: boolean;
    is_superuser?: boolean;
    full_name?: (string | null);
    avatar_url?: (string | null);
    is_setup_complete?: boolean;
    password?: (string | null);
};

export type UserUpdateMe = {
    full_name?: (string | null);
    email?: (string | null);
    is_setup_complete?: (boolean | null);
};

export type ValidationError = {
    loc: Array<(string | number)>;
    msg: string;
    type: string;
};

export type Visibility = 'public' | 'private' | 'team';

export type ContentCreateContentItemEndpointData = {
    requestBody: ContentItemCreate;
};

export type ContentCreateContentItemEndpointResponse = (ContentItemPublic);

export type ContentProcessContentItemEndpointData = {
    id: string;
};

export type ContentProcessContentItemEndpointResponse = (ContentItemPublic);

export type ContentListContentItemsEndpointData = {
    /**
     * Maximum number of items to return.
     */
    limit?: number;
    /**
     * Number of items to skip for pagination.
     */
    skip?: number;
};

export type ContentListContentItemsEndpointResponse = (Array<ContentItemPublic>);

export type ContentGetContentItemEndpointData = {
    id: string;
};

export type ContentGetContentItemEndpointResponse = (ContentItemPublic);

export type ContentGetContentMarkdownEndpointData = {
    id: string;
};

export type ContentGetContentMarkdownEndpointResponse = ({
    [key: string]: unknown;
});

export type ContentGetSupportedProcessorsResponse = (unknown);

export type ContentGetContentChunksEndpointData = {
    id: string;
    /**
     * Page number (1-based)
     */
    page?: number;
    /**
     * Number of chunks per page
     */
    size?: number;
};

export type ContentGetContentChunksEndpointResponse = ({
    [key: string]: unknown;
});

export type ContentGetContentChunksSummaryEndpointData = {
    id: string;
};

export type ContentGetContentChunksSummaryEndpointResponse = ({
    [key: string]: unknown;
});

export type ContentAnalyzeContentStreamData = {
    contentId: string;
    requestBody: Body_content_analyze_content_stream;
};

export type ContentAnalyzeContentStreamResponse = (unknown);

export type GoogleOauthGoogleCallbackApiData = {
    requestBody: GoogleCallbackRequest;
};

export type GoogleOauthGoogleCallbackApiResponse = (unknown);

export type GoogleOauthGoogleLoginData = {
    extensionCallback?: (string | null);
};

export type GoogleOauthGoogleLoginResponse = (unknown);

export type GoogleOauthGoogleCallbackData = {
    code?: (string | null);
    error?: (string | null);
    state?: (string | null);
};

export type GoogleOauthGoogleCallbackResponse = (unknown);

export type HealthGetHealthApiResponse = (unknown);

export type ItemsReadItemsData = {
    limit?: number;
    skip?: number;
};

export type ItemsReadItemsResponse = (ApiResponse_ItemsPublic_);

export type ItemsCreateItemData = {
    requestBody: ItemCreate;
};

export type ItemsCreateItemResponse = (ApiResponse_ItemPublic_);

export type ItemsReadItemData = {
    id: string;
};

export type ItemsReadItemResponse = (ApiResponse_ItemPublic_);

export type ItemsUpdateItemData = {
    id: string;
    requestBody: ItemUpdate;
};

export type ItemsUpdateItemResponse = (ApiResponse_ItemPublic_);

export type ItemsDeleteItemData = {
    id: string;
};

export type ItemsDeleteItemResponse = (ApiResponse_NoneType_);

export type LlmCreateCompletionData = {
    requestBody: CompletionRequest;
};

export type LlmCreateCompletionResponse = (unknown);

export type LlmCreateEmbeddingData = {
    requestBody: EmbeddingRequest;
};

export type LlmCreateEmbeddingResponse = (EmbeddingResponse);

export type LoginLoginAccessTokenData = {
    formData: Body_login_login_access_token;
};

export type LoginLoginAccessTokenResponse = (Token);

export type LoginTestTokenResponse = (UserPublic);

export type LoginLogoutResponse = (Message);

export type LoginRecoverPasswordData = {
    email: string;
};

export type LoginRecoverPasswordResponse = (Message);

export type LoginResetPasswordData = {
    requestBody: NewPassword;
};

export type LoginResetPasswordResponse = (Message);

export type LoginRecoverPasswordHtmlContentData = {
    email: string;
};

export type LoginRecoverPasswordHtmlContentResponse = (string);

export type PrivateCreateUserData = {
    requestBody: PrivateUserCreate;
};

export type PrivateCreateUserResponse = (UserPublic);

export type PromptsReadTagsData = {
    limit?: number;
    skip?: number;
};

export type PromptsReadTagsResponse = (Array<Tag>);

export type PromptsCreateTagData = {
    requestBody: TagCreate;
};

export type PromptsCreateTagResponse = (Tag);

export type PromptsUpdateTagData = {
    requestBody: TagUpdate;
    tagId: string;
};

export type PromptsUpdateTagResponse = (Tag);

export type PromptsDeleteTagData = {
    tagId: string;
};

export type PromptsDeleteTagResponse = (void);

export type PromptsCreatePromptData = {
    requestBody: PromptCreate;
};

export type PromptsCreatePromptResponse = (PromptReadWithTags);

export type PromptsReadPromptsData = {
    limit?: number;
    order?: string;
    search?: (string | null);
    skip?: number;
    sort?: (string | null);
    tagIds?: (Array<(string)> | null);
};

export type PromptsReadPromptsResponse = (Array<Prompt>);

export type PromptsReadPromptData = {
    promptId: string;
};

export type PromptsReadPromptResponse = (PromptReadWithTags);

export type PromptsUpdatePromptData = {
    createVersion?: boolean;
    promptId: string;
    requestBody: PromptUpdate;
};

export type PromptsUpdatePromptResponse = (PromptReadWithTags);

export type PromptsDeletePromptData = {
    promptId: string;
};

export type PromptsDeletePromptResponse = (void);

export type PromptsReadPromptVersionsData = {
    promptId: string;
};

export type PromptsReadPromptVersionsResponse = (Array<PromptVersion>);

export type PromptsCreatePromptVersionData = {
    promptId: string;
    requestBody: PromptVersionCreate;
};

export type PromptsCreatePromptVersionResponse = (PromptVersion);

export type PromptsReadPromptVersionData = {
    promptId: string;
    versionNum: number;
};

export type PromptsReadPromptVersionResponse = (PromptVersion);

export type PromptsDuplicatePromptData = {
    promptId: string;
};

export type PromptsDuplicatePromptResponse = (Prompt);

export type PromptsTogglePromptEnabledData = {
    promptId: string;
};

export type PromptsTogglePromptEnabledResponse = (PromptReadWithTags);

export type UsersReadUsersData = {
    limit?: number;
    skip?: number;
};

export type UsersReadUsersResponse = (UsersPublic);

export type UsersCreateUserData = {
    requestBody: UserCreate;
};

export type UsersCreateUserResponse = (UserPublic);

export type UsersReadUserMeResponse = (UserPublic);

export type UsersDeleteUserMeResponse = (Message);

export type UsersUpdateUserMeData = {
    requestBody: UserUpdateMe;
};

export type UsersUpdateUserMeResponse = (UserPublic);

export type UsersUpdatePasswordMeData = {
    requestBody: UpdatePassword;
};

export type UsersUpdatePasswordMeResponse = (Message);

export type UsersRegisterUserData = {
    requestBody: UserRegister;
};

export type UsersRegisterUserResponse = (UserPublic);

export type UsersReadUserByIdData = {
    userId: string;
};

export type UsersReadUserByIdResponse = (UserPublic);

export type UsersUpdateUserData = {
    requestBody: UserUpdate;
    userId: string;
};

export type UsersUpdateUserResponse = (UserPublic);

export type UsersDeleteUserData = {
    userId: string;
};

export type UsersDeleteUserResponse = (Message);

export type UtilsTestEmailData = {
    emailTo: string;
};

export type UtilsTestEmailResponse = (Message);

export type UtilsHealthCheckResponse = (boolean);