{"openapi": "3.1.0", "info": {"title": "nexus", "version": "0.1.0"}, "paths": {"/api/v1/health": {"get": {"tags": ["health"], "summary": "Get Health Api", "operationId": "health-get_health_api", "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {}}}}}}}, "/api/v1/login/access-token": {"post": {"tags": ["login"], "summary": "Login Access Token", "description": "OAuth2 compatible token login, get an access token for future requests", "operationId": "login-login_access_token", "requestBody": {"content": {"application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/Body_login-login_access_token"}}}, "required": true}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Token"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}, "head": {"tags": ["login"], "summary": "Login Access Token Head", "description": "HEAD request for login endpoint - used by browser extensions to check API availability\nReturns basic headers without body", "operationId": "login-login_access_token_head", "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"type": "object", "title": "Response Login-Login Access Token Head"}}}}}}}, "/api/v1/login/test-token": {"post": {"tags": ["login"], "summary": "Test Token", "description": "Test access token", "operationId": "login-test_token", "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/UserPublic"}}}}}, "security": [{"OAuth2PasswordBearer": []}]}}, "/api/v1/logout": {"post": {"tags": ["login"], "summary": "Logout", "description": "Logout current user\n\nThis endpoint invalidates the current token by adding it to a blacklist.\nThe frontend should still remove the tokens from local storage after calling this endpoint.", "operationId": "login-logout", "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Message"}}}}}, "security": [{"OAuth2PasswordBearer": []}]}}, "/api/v1/password-recovery/{email}": {"post": {"tags": ["login"], "summary": "Recover Password", "description": "Password Recovery", "operationId": "login-recover_password", "parameters": [{"name": "email", "in": "path", "required": true, "schema": {"type": "string", "title": "Email"}}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Message"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/api/v1/reset-password/": {"post": {"tags": ["login"], "summary": "Reset Password", "description": "Reset password", "operationId": "login-reset_password", "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/NewPassword"}}}, "required": true}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Message"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/api/v1/password-recovery-html-content/{email}": {"post": {"tags": ["login"], "summary": "Recover Password Html Content", "description": "HTML Content for Password Recovery", "operationId": "login-recover_password_html_content", "security": [{"OAuth2PasswordBearer": []}], "parameters": [{"name": "email", "in": "path", "required": true, "schema": {"type": "string", "title": "Email"}}], "responses": {"200": {"description": "Successful Response", "content": {"text/html": {"schema": {"type": "string"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/api/v1/users/": {"get": {"tags": ["users"], "summary": "Read Users", "description": "Retrieve users.", "operationId": "users-read_users", "security": [{"OAuth2PasswordBearer": []}], "parameters": [{"name": "skip", "in": "query", "required": false, "schema": {"type": "integer", "default": 0, "title": "Skip"}}, {"name": "limit", "in": "query", "required": false, "schema": {"type": "integer", "default": 100, "title": "Limit"}}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/UsersPublic"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}, "post": {"tags": ["users"], "summary": "Create User", "description": "Create new user.", "operationId": "users-create_user", "security": [{"OAuth2PasswordBearer": []}], "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/UserCreate"}}}}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/UserPublic"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/api/v1/users/me": {"get": {"tags": ["users"], "summary": "Read User Me", "description": "Get current user.", "operationId": "users-read_user_me", "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/UserPublic"}}}}}, "security": [{"OAuth2PasswordBearer": []}]}, "delete": {"tags": ["users"], "summary": "Delete User Me", "description": "Delete own user.", "operationId": "users-delete_user_me", "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Message"}}}}}, "security": [{"OAuth2PasswordBearer": []}]}, "head": {"tags": ["users"], "summary": "Read User Me Head", "description": "HEAD request for user info endpoint - used by browser extensions to check token validity\nReturns headers without body", "operationId": "users-read_user_me_head", "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"type": "object", "title": "Response Users-Read User Me Head"}}}}}, "security": [{"OAuth2PasswordBearer": []}]}, "patch": {"tags": ["users"], "summary": "Update User Me", "description": "Update own user.", "operationId": "users-update_user_me", "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/UserUpdateMe"}}}, "required": true}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/UserPublic"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}, "security": [{"OAuth2PasswordBearer": []}]}}, "/api/v1/users/me/password": {"patch": {"tags": ["users"], "summary": "Update Password Me", "description": "Update own password.", "operationId": "users-update_password_me", "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/UpdatePassword"}}}, "required": true}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Message"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}, "security": [{"OAuth2PasswordBearer": []}]}}, "/api/v1/users/signup": {"post": {"tags": ["users"], "summary": "Register User", "description": "Create new user without the need to be logged in.", "operationId": "users-register_user", "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/UserRegister"}}}, "required": true}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/UserPublic"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/api/v1/users/{user_id}": {"get": {"tags": ["users"], "summary": "Read User By Id", "description": "Get a specific user by id.", "operationId": "users-read_user_by_id", "security": [{"OAuth2PasswordBearer": []}], "parameters": [{"name": "user_id", "in": "path", "required": true, "schema": {"type": "string", "format": "uuid", "title": "User Id"}}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/UserPublic"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}, "patch": {"tags": ["users"], "summary": "Update User", "description": "Update a user.", "operationId": "users-update_user", "security": [{"OAuth2PasswordBearer": []}], "parameters": [{"name": "user_id", "in": "path", "required": true, "schema": {"type": "string", "format": "uuid", "title": "User Id"}}], "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/UserUpdate"}}}}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/UserPublic"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}, "delete": {"tags": ["users"], "summary": "Delete User", "description": "Delete a user.", "operationId": "users-delete_user", "security": [{"OAuth2PasswordBearer": []}], "parameters": [{"name": "user_id", "in": "path", "required": true, "schema": {"type": "string", "format": "uuid", "title": "User Id"}}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Message"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/api/v1/utils/test-email/": {"post": {"tags": ["utils"], "summary": "Test Email", "description": "Test emails.", "operationId": "utils-test_email", "security": [{"OAuth2PasswordBearer": []}], "parameters": [{"name": "email_to", "in": "query", "required": true, "schema": {"type": "string", "format": "email", "title": "Email To"}}], "responses": {"201": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Message"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/api/v1/utils/health-check/": {"get": {"tags": ["utils"], "summary": "Health Check", "operationId": "utils-health_check", "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"type": "boolean", "title": "Response Utils-Health Check"}}}}}}}, "/api/v1/items/": {"get": {"tags": ["items"], "summary": "Read Items", "description": "Retrieve items.", "operationId": "items-read_items", "security": [{"OAuth2PasswordBearer": []}], "parameters": [{"name": "skip", "in": "query", "required": false, "schema": {"type": "integer", "default": 0, "title": "Skip"}}, {"name": "limit", "in": "query", "required": false, "schema": {"type": "integer", "default": 100, "title": "Limit"}}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ApiResponse_ItemsPublic_"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}, "post": {"tags": ["items"], "summary": "Create Item", "description": "Create new item.", "operationId": "items-create_item", "security": [{"OAuth2PasswordBearer": []}], "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ItemCreate"}}}}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ApiResponse_ItemPublic_"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/api/v1/items/{id}": {"get": {"tags": ["items"], "summary": "Read Item", "description": "Get item by ID.", "operationId": "items-read_item", "security": [{"OAuth2PasswordBearer": []}], "parameters": [{"name": "id", "in": "path", "required": true, "schema": {"type": "string", "format": "uuid", "title": "Id"}}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ApiResponse_ItemPublic_"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}, "put": {"tags": ["items"], "summary": "Update Item", "description": "Update an item.", "operationId": "items-update_item", "security": [{"OAuth2PasswordBearer": []}], "parameters": [{"name": "id", "in": "path", "required": true, "schema": {"type": "string", "format": "uuid", "title": "Id"}}], "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ItemUpdate"}}}}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ApiResponse_ItemPublic_"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}, "delete": {"tags": ["items"], "summary": "Delete Item", "description": "Delete an item.", "operationId": "items-delete_item", "security": [{"OAuth2PasswordBearer": []}], "parameters": [{"name": "id", "in": "path", "required": true, "schema": {"type": "string", "format": "uuid", "title": "Id"}}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ApiResponse_NoneType_"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/api/v1/auth/google-callback": {"post": {"tags": ["google_oauth"], "summary": "Google Callback Api", "description": "Handle Google OAuth callback from frontend\nThis is maintained for backward compatibility but not used in the new flow", "operationId": "google_oauth-google_callback_api", "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/GoogleCallbackRequest"}}}, "required": true}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/api/v1/login/google": {"get": {"tags": ["google_oauth"], "summary": "Google Login", "description": "Initiate Google OAuth2 authentication flow\nThis endpoint redirects to Google's login page", "operationId": "google_oauth-google_login", "parameters": [{"name": "extension_callback", "in": "query", "required": false, "schema": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Extension Callback"}}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/api/v1/login/google/callback": {"get": {"tags": ["google_oauth"], "summary": "Google Callback", "description": "Handle the callback from Google OAuth\nThis endpoint is called by Google after the user has logged in", "operationId": "google_oauth-google_callback", "parameters": [{"name": "code", "in": "query", "required": false, "schema": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Code"}}, {"name": "state", "in": "query", "required": false, "schema": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "State"}}, {"name": "error", "in": "query", "required": false, "schema": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Error"}}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/api/v1/prompts/tags": {"get": {"tags": ["prompts", "prompts"], "summary": "Read Tags", "description": "\u83b7\u53d6\u6807\u7b7e\u5217\u8868", "operationId": "prompts-read_tags", "security": [{"OAuth2PasswordBearer": []}], "parameters": [{"name": "skip", "in": "query", "required": false, "schema": {"type": "integer", "default": 0, "title": "Skip"}}, {"name": "limit", "in": "query", "required": false, "schema": {"type": "integer", "default": 100, "title": "Limit"}}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/Tag"}, "title": "Response Prompts-Read Tags"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}, "post": {"tags": ["prompts", "prompts"], "summary": "Create Tag", "description": "\u521b\u5efa\u65b0\u6807\u7b7e", "operationId": "prompts-create_tag", "security": [{"OAuth2PasswordBearer": []}], "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/TagCreate"}}}}, "responses": {"201": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Tag"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/api/v1/prompts/tags/{tag_id}": {"put": {"tags": ["prompts", "prompts"], "summary": "Update Tag", "description": "\u66f4\u65b0\u6807\u7b7e", "operationId": "prompts-update_tag", "security": [{"OAuth2PasswordBearer": []}], "parameters": [{"name": "tag_id", "in": "path", "required": true, "schema": {"type": "string", "format": "uuid", "title": "Tag Id"}}], "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/TagUpdate"}}}}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Tag"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}, "delete": {"tags": ["prompts", "prompts"], "summary": "Delete Tag", "description": "\u5220\u9664\u6807\u7b7e (\u9700\u8981\u8d85\u7ea7\u7528\u6237\u6743\u9650)", "operationId": "prompts-delete_tag", "security": [{"OAuth2PasswordBearer": []}], "parameters": [{"name": "tag_id", "in": "path", "required": true, "schema": {"type": "string", "format": "uuid", "title": "Tag Id"}}], "responses": {"204": {"description": "Successful Response"}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/api/v1/prompts/": {"post": {"tags": ["prompts", "prompts"], "summary": "Create Prompt", "description": "\u521b\u5efa\u65b0\u7684\u63d0\u793a\u8bcd", "operationId": "prompts-create_prompt", "security": [{"OAuth2PasswordBearer": []}], "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/PromptCreate"}}}}, "responses": {"201": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/PromptReadWithTags"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}, "get": {"tags": ["prompts", "prompts"], "summary": "Read Prompts", "description": "Read and return a list of prompts based on specified filters and sorting.\n\nThe function constructs a query to retrieve prompts from the database, applying\noptional filters for tag IDs, search terms, and sorting by creation or update\ntime. It also handles pagination through skip and limit parameters. Tags are\nmanually loaded for each prompt after querying.\n\nArgs:\n    db (Session): Database session.\n    _current_user (Any): Current user information (dependency).\n    skip (int?): Number of records to skip. Defaults to 0.\n    limit (int?): Maximum number of records to return. Defaults to 100.\n    tag_ids (list[UUID] | None?): List of UUIDs for tags to filter prompts by.\n    search (str | None?): Search term to filter prompts by name, description, or content.\n    sort (str | None?): Field to sort the results by ('created_at' or 'updated_at'). Defaults to None.\n    order (str?): Order of sorting ('asc' or 'desc'). Defaults to \"desc\".\n\nReturns:\n    list[Prompt]: List of prompts matching the filters and sorted as specified.\n\nRaises:\n    HTTPException: If an error occurs during database query execution.", "operationId": "prompts-read_prompts", "security": [{"OAuth2PasswordBearer": []}], "parameters": [{"name": "skip", "in": "query", "required": false, "schema": {"type": "integer", "default": 0, "title": "Skip"}}, {"name": "limit", "in": "query", "required": false, "schema": {"type": "integer", "default": 100, "title": "Limit"}}, {"name": "tag_ids", "in": "query", "required": false, "schema": {"anyOf": [{"type": "array", "items": {"type": "string", "format": "uuid"}}, {"type": "null"}], "title": "Tag Ids"}}, {"name": "search", "in": "query", "required": false, "schema": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Search"}}, {"name": "sort", "in": "query", "required": false, "schema": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Sort"}}, {"name": "order", "in": "query", "required": false, "schema": {"type": "string", "default": "desc", "title": "Order"}}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/Prompt"}, "title": "Response Prompts-Read Prompts"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/api/v1/prompts/{prompt_id}": {"get": {"tags": ["prompts", "prompts"], "summary": "Read Prompt", "description": "\u83b7\u53d6\u63d0\u793a\u8bcd\u8be6\u60c5", "operationId": "prompts-read_prompt", "security": [{"OAuth2PasswordBearer": []}], "parameters": [{"name": "prompt_id", "in": "path", "required": true, "schema": {"type": "string", "format": "uuid", "title": "Prompt Id"}}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/PromptReadWithTags"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}, "put": {"tags": ["prompts", "prompts"], "summary": "Update Prompt", "description": "Update a prompt by its ID.\n\nThis function updates the prompt in the database with new data provided. It\nchecks for permissions, updates other fields, and handles version creation if\nspecified. It also manages tag relationships by updating or clearing them as\nneeded.\n\nArgs:\n    db (Session): The database session.\n    prompt_id (UUID): The ID of the prompt to update.\n    prompt_in (PromptUpdate): The data containing the new values for the prompt.\n    current_user (Any): The current user making the request.\n    create_version (bool): A flag indicating whether to create a new version.\n\nReturns:\n    PromptReadWithTags: The updated prompt with tags included.\n\nRaises:\n    HTTPException: If the prompt is not found, the user lacks permissions,\n        or an error occurs during the update process.", "operationId": "prompts-update_prompt", "security": [{"OAuth2PasswordBearer": []}], "parameters": [{"name": "prompt_id", "in": "path", "required": true, "schema": {"type": "string", "format": "uuid", "title": "Prompt Id"}}, {"name": "create_version", "in": "query", "required": false, "schema": {"type": "boolean", "default": false, "title": "Create Version"}}], "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/PromptUpdate"}}}}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/PromptReadWithTags"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}, "delete": {"tags": ["prompts", "prompts"], "summary": "Delete Prompt", "description": "\u5220\u9664\u63d0\u793a\u8bcd", "operationId": "prompts-delete_prompt", "security": [{"OAuth2PasswordBearer": []}], "parameters": [{"name": "prompt_id", "in": "path", "required": true, "schema": {"type": "string", "format": "uuid", "title": "Prompt Id"}}], "responses": {"204": {"description": "Successful Response"}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/api/v1/prompts/{prompt_id}/versions": {"get": {"tags": ["prompts", "prompts"], "summary": "Read Prompt Versions", "description": "Retrieves the version history of a given prompt.\n\nThis function fetches the version history for a specified prompt by its ID. It\nfirst retrieves the prompt from the database and checks if it exists. Then, it\nverifies the user's permissions to access the prompt. If both steps are\nsuccessful, it queries the database to get all versions of the prompt, sorted\nin descending order by version number. If any errors occur during this process,\nappropriate HTTP exceptions are raised.\n\nArgs:\n    db (Session): The database session.\n    prompt_id (UUID): The ID of the prompt for which to retrieve version history.\n    current_user (Any): The current authenticated user.", "operationId": "prompts-read_prompt_versions", "security": [{"OAuth2PasswordBearer": []}], "parameters": [{"name": "prompt_id", "in": "path", "required": true, "schema": {"type": "string", "format": "uuid", "title": "Prompt Id"}}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/PromptVersion"}, "title": "Response Prompts-Read Prompt Versions"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}, "post": {"tags": ["prompts", "prompts"], "summary": "Create Prompt Version", "description": "Creates a new version of a prompt.\n\nThis function retrieves the prompt by its ID, checks for access permissions,\ndetermines the maximum existing version number, and then creates a new version\nwith incremented version number, content, change notes, creation time, and\ncreator ID. It handles exceptions by logging errors and raising HTTP\nexceptions.", "operationId": "prompts-create_prompt_version", "security": [{"OAuth2PasswordBearer": []}], "parameters": [{"name": "prompt_id", "in": "path", "required": true, "schema": {"type": "string", "format": "uuid", "title": "Prompt Id"}}], "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/PromptVersionCreate"}}}}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/PromptVersion"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/api/v1/prompts/{prompt_id}/versions/{version_num}": {"get": {"tags": ["prompts", "prompts"], "summary": "Read Prompt Version", "description": "\u83b7\u53d6\u63d0\u793a\u8bcd\u7279\u5b9a\u7248\u672c", "operationId": "prompts-read_prompt_version", "security": [{"OAuth2PasswordBearer": []}], "parameters": [{"name": "prompt_id", "in": "path", "required": true, "schema": {"type": "string", "format": "uuid", "title": "Prompt Id"}}, {"name": "version_num", "in": "path", "required": true, "schema": {"type": "integer", "title": "Version Num"}}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/PromptVersion"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/api/v1/prompts/{prompt_id}/duplicate": {"post": {"tags": ["prompts", "prompts"], "summary": "Duplicate Prompt", "description": "Duplicates a prompt based on the provided prompt ID.\n\nThis function retrieves the original prompt, checks for access permissions,\ncreates a new duplicate with updated attributes such as name and visibility,\ncopies associated tags, and initializes a new version for the duplicated\nprompt. If any errors occur during the process, it rolls back the database\ntransaction and raises an appropriate HTTP exception.\n\nArgs:\n    db (Session): The database session dependency.\n    prompt_id (UUID): The ID of the original prompt to be duplicated.\n    current_user (Any): The current user making the request.", "operationId": "prompts-duplicate_prompt", "security": [{"OAuth2PasswordBearer": []}], "parameters": [{"name": "prompt_id", "in": "path", "required": true, "schema": {"type": "string", "format": "uuid", "title": "Prompt Id"}}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Prompt"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/api/v1/prompts/{prompt_id}/toggle-enabled": {"patch": {"tags": ["prompts", "prompts"], "summary": "Toggle Prompt Enabled", "description": "\u5feb\u901f\u5207\u6362\u63d0\u793a\u8bcd\u7684\u542f\u7528\u72b6\u6001", "operationId": "prompts-toggle_prompt_enabled", "security": [{"OAuth2PasswordBearer": []}], "parameters": [{"name": "prompt_id", "in": "path", "required": true, "schema": {"type": "string", "format": "uuid", "title": "Prompt Id"}}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/PromptReadWithTags"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/api/v1/llm/completions": {"post": {"tags": ["llm"], "summary": "Create Completion", "description": "Handles creation of completions based on request data.", "operationId": "llm-create_completion", "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/CompletionRequest"}}}, "required": true}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/api/v1/llm/embeddings": {"post": {"tags": ["llm"], "summary": "Create Embedding", "description": "Handles the creation of embeddings by forwarding a request to LiteLLM.", "operationId": "llm-create_embedding", "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/EmbeddingRequest"}}}, "required": true}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/EmbeddingResponse"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/api/v1/content/create": {"post": {"tags": ["content"], "summary": "Create a New Content Item", "description": "Uploads and creates a new content item in the system. Requires user authentication.", "operationId": "content-create_content_item_endpoint", "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ContentItemCreate"}}}, "required": true}, "responses": {"201": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ContentItemPublic"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}, "security": [{"OAuth2PasswordBearer": []}]}}, "/api/v1/content/process/{id}": {"post": {"tags": ["content"], "summary": "Process Content Item", "description": "Process a content item to convert it to Markdown format using appropriate processor.", "operationId": "content-process_content_item_endpoint", "security": [{"OAuth2PasswordBearer": []}], "parameters": [{"name": "id", "in": "path", "required": true, "schema": {"type": "string", "format": "uuid", "title": "Id"}}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ContentItemPublic"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/api/v1/content/": {"get": {"tags": ["content"], "summary": "List Content Items", "description": "Retrieves a list of content items for the authenticated user, with optional pagination.", "operationId": "content-list_content_items_endpoint", "security": [{"OAuth2PasswordBearer": []}], "parameters": [{"name": "skip", "in": "query", "required": false, "schema": {"type": "integer", "minimum": 0, "description": "Number of items to skip for pagination.", "default": 0, "title": "Skip"}, "description": "Number of items to skip for pagination."}, {"name": "limit", "in": "query", "required": false, "schema": {"type": "integer", "maximum": 200, "minimum": 1, "description": "Maximum number of items to return.", "default": 100, "title": "Limit"}, "description": "Maximum number of items to return."}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/ContentItemPublic"}, "title": "Response Content-List Content Items Endpoint"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/api/v1/content/{id}": {"get": {"tags": ["content"], "summary": "Get a Specific Content Item", "description": "Retrieves a single content item by its unique ID. User can only access their own content.", "operationId": "content-get_content_item_endpoint", "security": [{"OAuth2PasswordBearer": []}], "parameters": [{"name": "id", "in": "path", "required": true, "schema": {"type": "string", "format": "uuid", "title": "Id"}}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ContentItemPublic"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/api/v1/content/{id}/markdown": {"get": {"tags": ["content"], "summary": "Get Content Item as Markdown", "description": "Retrieves the processed markdown content for a content item. Returns raw markdown text.", "operationId": "content-get_content_markdown_endpoint", "security": [{"OAuth2PasswordBearer": []}], "parameters": [{"name": "id", "in": "path", "required": true, "schema": {"type": "string", "format": "uuid", "title": "Id"}}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"type": "object", "title": "Response Content-Get Content Markdown Endpoint"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/api/v1/content/processors/supported": {"get": {"tags": ["content"], "summary": "Get Supported Content Types", "description": "Get list of supported content types and their processors.", "operationId": "content-get_supported_processors", "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {}}}}}}}, "/api/v1/content/{id}/chunks": {"get": {"tags": ["content"], "summary": "Get Content Chunks", "description": "Retrieves content chunks for efficient rendering with pagination support.", "operationId": "content-get_content_chunks_endpoint", "security": [{"OAuth2PasswordBearer": []}], "parameters": [{"name": "id", "in": "path", "required": true, "schema": {"type": "string", "format": "uuid", "title": "Id"}}, {"name": "page", "in": "query", "required": false, "schema": {"type": "integer", "minimum": 1, "description": "Page number (1-based)", "default": 1, "title": "Page"}, "description": "Page number (1-based)"}, {"name": "size", "in": "query", "required": false, "schema": {"type": "integer", "maximum": 50, "minimum": 1, "description": "Number of chunks per page", "default": 10, "title": "Size"}, "description": "Number of chunks per page"}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"type": "object", "title": "Response Content-Get Content Chunks Endpoint"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/api/v1/content/{id}/chunks/summary": {"get": {"tags": ["content"], "summary": "Get Content Chunks Summary", "description": "Get summary information about content chunks without the actual content.", "operationId": "content-get_content_chunks_summary_endpoint", "security": [{"OAuth2PasswordBearer": []}], "parameters": [{"name": "id", "in": "path", "required": true, "schema": {"type": "string", "format": "uuid", "title": "Id"}}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"type": "object", "title": "Response Content-Get Content Chunks Summary Endpoint"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/api/v1/content/{content_id}/analyze": {"post": {"tags": ["content"], "summary": "Analyze Content Stream", "description": "Stream AI analysis of content using LiteLLM.\n\nArgs:\n    content_id: ID of the content to analyze\n    system_prompt: System prompt (e.g., prompt template)\n    user_prompt: User prompt (the actual content text)\n    current_user: Current authenticated user\n    db: Database session\n\nReturns:\n    StreamingResponse: Server-sent events with analysis chunks", "operationId": "content-analyze_content_stream", "security": [{"OAuth2PasswordBearer": []}], "parameters": [{"name": "content_id", "in": "path", "required": true, "schema": {"type": "string", "title": "Content Id"}}], "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Body_content-analyze_content_stream"}}}}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/api/v1/content/{id}/share": {"post": {"tags": ["content"], "summary": "Create a Share Link for a Content Item", "description": "Generates a shareable link for the specified content item. Requires ownership.", "operationId": "content-create_share_link_endpoint", "security": [{"OAuth2PasswordBearer": []}], "parameters": [{"name": "id", "in": "path", "required": true, "schema": {"type": "string", "format": "uuid", "description": "ID of the content item to share", "title": "Id"}, "description": "ID of the content item to share"}], "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ContentShareCreate"}}}}, "responses": {"201": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ContentSharePublic"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}, "delete": {"tags": ["content"], "summary": "Deactivate Share Link(s) for a Content Item", "description": "Deactivates active share links for the specified content item. Requires ownership.", "operationId": "content-deactivate_share_link_endpoint", "security": [{"OAuth2PasswordBearer": []}], "parameters": [{"name": "id", "in": "path", "required": true, "schema": {"type": "string", "format": "uuid", "description": "ID of the content item whose shares to deactivate", "title": "Id"}, "description": "ID of the content item whose shares to deactivate"}], "responses": {"204": {"description": "Successful Response"}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/api/v1/content/share/{token}": {"get": {"tags": ["content"], "summary": "Access Shared Content", "description": "Retrieves a content item using a share token. May require a password.", "operationId": "content-get_shared_content_endpoint", "parameters": [{"name": "token", "in": "path", "required": true, "schema": {"type": "string", "description": "The unique share token", "title": "Token"}, "description": "The unique share token"}, {"name": "password", "in": "query", "required": false, "schema": {"anyOf": [{"type": "string"}, {"type": "null"}], "description": "Password for protected content", "title": "Password"}, "description": "Password for protected content"}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ContentItemPublic"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/api/v1/images/upload-url": {"post": {"tags": ["images"], "summary": "Get a presigned URL for uploading a file to S3/R2-compatible storage.", "description": "Get a presigned URL that can be used to upload a file directly to the storage.\nThe `s3_key` returned is the path in the bucket where the file should be uploaded.", "operationId": "images-get_upload_url", "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/PresignedURLRequest"}}}, "required": true}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/PresignedURLResponse"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}, "security": [{"OAuth2PasswordBearer": []}]}}, "/api/v1/images/": {"post": {"tags": ["images"], "summary": "Create a new image record.", "description": "After uploading a file using a presigned URL, call this endpoint to create the image metadata in the database.", "operationId": "images-create_image_record", "security": [{"OAuth2PasswordBearer": []}], "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ImageCreate"}}}}, "responses": {"201": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ImageResponse"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}, "get": {"tags": ["images"], "summary": "List images for the current user.", "description": "Retrieve a list of images owned by the current user.", "operationId": "images-list_images", "security": [{"OAuth2PasswordBearer": []}], "parameters": [{"name": "skip", "in": "query", "required": false, "schema": {"type": "integer", "minimum": 0, "default": 0, "title": "Skip"}}, {"name": "limit", "in": "query", "required": false, "schema": {"type": "integer", "maximum": 200, "minimum": 1, "default": 100, "title": "Limit"}}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/ImageResponse"}, "title": "Response Images-List Images"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/api/v1/images/{image_id}": {"get": {"tags": ["images"], "summary": "Get an image by its ID.", "description": "Get a specific image by its ID.\nUsers can only retrieve images they own.", "operationId": "images-read_image", "security": [{"OAuth2PasswordBearer": []}], "parameters": [{"name": "image_id", "in": "path", "required": true, "schema": {"type": "string", "format": "uuid", "title": "Image Id"}}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ImageResponse"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}, "delete": {"tags": ["images"], "summary": "Delete an image.", "description": "Delete an image:\n- Deletes the file from S3/R2 storage.\n- Deletes the image metadata from the database.\nUsers can only delete images they own.", "operationId": "images-delete_image", "security": [{"OAuth2PasswordBearer": []}], "parameters": [{"name": "image_id", "in": "path", "required": true, "schema": {"type": "string", "format": "uuid", "title": "Image Id"}}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ImageResponse"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/api/v1/private/users/": {"post": {"tags": ["private"], "summary": "Create User", "description": "Create a new user.", "operationId": "private-create_user", "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/PrivateUserCreate"}}}, "required": true}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/UserPublic"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}}, "components": {"schemas": {"ApiResponse_ItemPublic_": {"properties": {"data": {"anyOf": [{}, {"type": "null"}], "title": "Data"}, "meta": {"anyOf": [{"type": "object"}, {"type": "null"}], "title": "Meta"}, "error": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Error"}}, "type": "object", "title": "ApiResponse[ItemPublic]"}, "ApiResponse_ItemsPublic_": {"properties": {"data": {"anyOf": [{}, {"type": "null"}], "title": "Data"}, "meta": {"anyOf": [{"type": "object"}, {"type": "null"}], "title": "Meta"}, "error": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Error"}}, "type": "object", "title": "ApiResponse[ItemsPublic]"}, "ApiResponse_NoneType_": {"properties": {"data": {"anyOf": [{}, {"type": "null"}], "title": "Data"}, "meta": {"anyOf": [{"type": "object"}, {"type": "null"}], "title": "Meta"}, "error": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Error"}}, "type": "object", "title": "ApiResponse[NoneType]"}, "Body_content-analyze_content_stream": {"properties": {"system_prompt": {"type": "string", "title": "System Prompt", "description": "System prompt for analysis"}, "user_prompt": {"type": "string", "title": "User Prompt", "description": "User prompt (content text)"}}, "type": "object", "required": ["system_prompt", "user_prompt"], "title": "Body_content-analyze_content_stream"}, "Body_login-login_access_token": {"properties": {"grant_type": {"anyOf": [{"type": "string", "pattern": "^password$"}, {"type": "null"}], "title": "Grant Type"}, "username": {"type": "string", "title": "Username"}, "password": {"type": "string", "title": "Password"}, "scope": {"type": "string", "title": "Scope", "default": ""}, "client_id": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Client Id"}, "client_secret": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Client Secret"}}, "type": "object", "required": ["username", "password"], "title": "Body_login-login_access_token"}, "CompletionRequest": {"properties": {"model": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Model", "default": "gpt-3.5-turbo"}, "messages": {"items": {"$ref": "#/components/schemas/LLMMessage"}, "type": "array", "title": "Messages"}, "temperature": {"anyOf": [{"type": "number"}, {"type": "null"}], "title": "Temperature", "default": 1.0}, "max_tokens": {"anyOf": [{"type": "integer"}, {"type": "null"}], "title": "Max Tokens"}, "stream": {"anyOf": [{"type": "boolean"}, {"type": "null"}], "title": "Stream", "default": false}, "top_p": {"anyOf": [{"type": "number"}, {"type": "null"}], "title": "Top P"}, "stop": {"anyOf": [{"type": "string"}, {"items": {"type": "string"}, "type": "array"}, {"type": "null"}], "title": "Stop"}, "presence_penalty": {"anyOf": [{"type": "number"}, {"type": "null"}], "title": "Presence Penalty"}, "frequency_penalty": {"anyOf": [{"type": "number"}, {"type": "null"}], "title": "Frequency Penalty"}, "logit_bias": {"anyOf": [{"additionalProperties": {"type": "number"}, "type": "object"}, {"type": "null"}], "title": "Logit Bias"}, "user": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "User"}, "metadata": {"anyOf": [{"additionalProperties": {"type": "string"}, "type": "object"}, {"type": "null"}], "title": "Metadata"}, "api_key": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Api Key"}}, "type": "object", "required": ["messages"], "title": "CompletionRequest"}, "ContentItemCreate": {"properties": {"type": {"type": "string", "title": "Type"}, "source_uri": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Source Uri"}, "title": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Title"}, "summary": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Summary"}, "content_text": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Content Text"}}, "type": "object", "required": ["type"], "title": "ContentItemCreate"}, "ContentItemPublic": {"properties": {"type": {"type": "string", "title": "Type"}, "source_uri": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Source Uri"}, "title": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Title"}, "summary": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Summary"}, "id": {"type": "string", "format": "uuid", "title": "Id"}, "user_id": {"type": "string", "format": "uuid", "title": "User Id"}, "processing_status": {"type": "string", "title": "Processing Status"}, "content_text": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Content Text"}, "created_at": {"type": "string", "format": "date-time", "title": "Created At"}, "updated_at": {"type": "string", "format": "date-time", "title": "Updated At"}}, "type": "object", "required": ["type", "id", "user_id", "processing_status", "created_at", "updated_at"], "title": "ContentItemPublic"}, "ContentShareCreate": {"properties": {"expires_at": {"anyOf": [{"type": "string", "format": "date-time"}, {"type": "null"}], "title": "Expires At"}, "max_access_count": {"anyOf": [{"type": "integer"}, {"type": "null"}], "title": "Max Access Count"}, "password": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Password"}}, "type": "object", "title": "ContentShareCreate"}, "ContentSharePublic": {"properties": {"id": {"type": "string", "format": "uuid", "title": "Id"}, "share_token": {"type": "string", "title": "Share Token"}, "created_at": {"type": "string", "format": "date-time", "title": "Created At"}, "expires_at": {"anyOf": [{"type": "string", "format": "date-time"}, {"type": "null"}], "title": "Expires At"}, "is_active": {"type": "boolean", "title": "Is Active"}}, "type": "object", "required": ["id", "share_token", "created_at", "is_active"], "title": "ContentSharePublic"}, "EmbeddingData": {"properties": {"object": {"type": "string", "title": "Object"}, "embedding": {"items": {"type": "number"}, "type": "array", "title": "Embedding"}, "index": {"type": "integer", "title": "Index"}}, "type": "object", "required": ["object", "embedding", "index"], "title": "EmbeddingData"}, "EmbeddingRequest": {"properties": {"input": {"anyOf": [{"type": "string"}, {"items": {"type": "string"}, "type": "array"}], "title": "Input"}, "model": {"type": "string", "title": "Model"}, "user": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "User"}, "api_key": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Api Key"}}, "type": "object", "required": ["input", "model"], "title": "EmbeddingRequest"}, "EmbeddingResponse": {"properties": {"object": {"type": "string", "title": "Object"}, "data": {"items": {"$ref": "#/components/schemas/EmbeddingData"}, "type": "array", "title": "Data"}, "model": {"type": "string", "title": "Model"}, "usage": {"$ref": "#/components/schemas/EmbeddingUsage"}}, "type": "object", "required": ["object", "data", "model", "usage"], "title": "EmbeddingResponse"}, "EmbeddingUsage": {"properties": {"prompt_tokens": {"type": "integer", "title": "Prompt Tokens"}, "total_tokens": {"type": "integer", "title": "Total Tokens"}}, "type": "object", "required": ["prompt_tokens", "total_tokens"], "title": "EmbeddingUsage"}, "GoogleCallbackRequest": {"properties": {"token": {"type": "string", "title": "Token"}, "user_info": {"type": "object", "title": "User Info"}}, "type": "object", "required": ["token", "user_info"], "title": "GoogleCallbackRequest"}, "HTTPValidationError": {"properties": {"detail": {"items": {"$ref": "#/components/schemas/ValidationError"}, "type": "array", "title": "Detail"}}, "type": "object", "title": "HTTPValidationError"}, "ImageCreate": {"properties": {"source_url": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Source Url"}, "s3_key": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "S3 Key"}, "type": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Type"}, "size": {"anyOf": [{"type": "integer"}, {"type": "null"}], "title": "Size"}, "format": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Format"}, "alt_text": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Alt Text"}, "importance": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Importance"}, "is_accessible": {"anyOf": [{"type": "boolean"}, {"type": "null"}], "title": "Is Accessible", "default": false}}, "type": "object", "title": "ImageCreate"}, "ImageResponse": {"properties": {"source_url": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Source Url"}, "s3_key": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "S3 Key"}, "type": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Type"}, "size": {"anyOf": [{"type": "integer"}, {"type": "null"}], "title": "Size"}, "format": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Format"}, "alt_text": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Alt Text"}, "importance": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Importance"}, "is_accessible": {"anyOf": [{"type": "boolean"}, {"type": "null"}], "title": "Is Accessible", "default": false}, "id": {"type": "string", "format": "uuid", "title": "Id"}, "owner_id": {"type": "string", "format": "uuid", "title": "Owner Id"}, "created_at": {"type": "string", "format": "date-time", "title": "Created At"}, "updated_at": {"type": "string", "format": "date-time", "title": "Updated At"}, "last_checked": {"anyOf": [{"type": "string", "format": "date-time"}, {"type": "null"}], "title": "Last Checked"}}, "type": "object", "required": ["id", "owner_id", "created_at", "updated_at"], "title": "ImageResponse"}, "InputVariable": {"properties": {"name": {"type": "string", "title": "Name"}, "description": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Description"}, "required": {"type": "boolean", "title": "Required", "default": false}}, "type": "object", "required": ["name"], "title": "InputVariable"}, "ItemCreate": {"properties": {"title": {"type": "string", "maxLength": 255, "minLength": 1, "title": "Title"}, "description": {"anyOf": [{"type": "string", "maxLength": 255}, {"type": "null"}], "title": "Description"}}, "type": "object", "required": ["title"], "title": "ItemCreate"}, "ItemUpdate": {"properties": {"title": {"anyOf": [{"type": "string", "maxLength": 255, "minLength": 1}, {"type": "null"}], "title": "Title"}, "description": {"anyOf": [{"type": "string", "maxLength": 255}, {"type": "null"}], "title": "Description"}}, "type": "object", "title": "ItemUpdate"}, "LLMMessage": {"properties": {"role": {"type": "string", "title": "Role"}, "content": {"type": "string", "title": "Content"}}, "type": "object", "required": ["role", "content"], "title": "LLMMessage"}, "Message": {"properties": {"message": {"type": "string", "title": "Message"}}, "type": "object", "required": ["message"], "title": "Message"}, "NewPassword": {"properties": {"token": {"type": "string", "title": "Token"}, "new_password": {"type": "string", "maxLength": 40, "minLength": 8, "title": "New Password"}}, "type": "object", "required": ["token", "new_password"], "title": "NewPassword"}, "PresignedURLRequest": {"properties": {"filename": {"type": "string", "title": "Filename"}, "content_type": {"type": "string", "title": "Content Type"}}, "type": "object", "required": ["filename", "content_type"], "title": "PresignedURLRequest"}, "PresignedURLResponse": {"properties": {"presigned_url": {"type": "string", "title": "Presigned Url"}, "s3_key": {"type": "string", "title": "S3 Key"}}, "type": "object", "required": ["presigned_url", "s3_key"], "title": "PresignedURLResponse"}, "PrivateUserCreate": {"properties": {"email": {"type": "string", "title": "Email"}, "password": {"type": "string", "title": "Password"}, "full_name": {"type": "string", "title": "Full Name"}, "is_verified": {"type": "boolean", "title": "Is Verified", "default": false}}, "type": "object", "required": ["email", "password", "full_name"], "title": "PrivateUserCreate"}, "Prompt": {"properties": {"name": {"type": "string", "title": "Name"}, "description": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Description"}, "content": {"type": "string", "title": "Content"}, "type": {"$ref": "#/components/schemas/PromptType"}, "input_vars": {"anyOf": [{"items": {"$ref": "#/components/schemas/InputVariable"}, "type": "array"}, {"type": "null"}], "title": "Input Vars"}, "visibility": {"$ref": "#/components/schemas/Visibility"}, "meta_data": {"anyOf": [{"type": "object"}, {"type": "null"}], "title": "Meta Data"}, "version": {"type": "integer", "title": "Version", "default": 1}, "enabled": {"type": "boolean", "title": "Enabled", "description": "\u662f\u5426\u542f\u7528\u8be5\u63d0\u793a\u8bcd", "default": false}, "team_id": {"anyOf": [{"type": "string", "format": "uuid"}, {"type": "null"}], "title": "Team Id"}, "id": {"type": "string", "format": "uuid", "title": "Id"}, "created_at": {"type": "string", "format": "date-time", "title": "Created At"}, "updated_at": {"type": "string", "format": "date-time", "title": "Updated At"}, "embedding": {"anyOf": [{"items": {"type": "number"}, "type": "array"}, {"type": "null"}], "title": "Embedding"}, "created_by": {"type": "string", "format": "uuid", "title": "Created By"}}, "type": "object", "required": ["name", "content", "type", "visibility", "created_by"], "title": "Prompt", "example": {"content": "This is an example prompt content", "created_at": "2023-01-01T00:00:00.000000", "description": "An example prompt", "id": "3fa85f64-5717-4562-b3fc-2c963f66afa6", "name": "Example Prompt", "tags": [], "type": "simple", "visibility": "public"}}, "PromptCreate": {"properties": {"name": {"type": "string", "title": "Name"}, "description": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Description"}, "content": {"type": "string", "title": "Content"}, "type": {"$ref": "#/components/schemas/PromptType"}, "input_vars": {"anyOf": [{"items": {"$ref": "#/components/schemas/InputVariable"}, "type": "array"}, {"type": "null"}], "title": "Input Vars"}, "visibility": {"$ref": "#/components/schemas/Visibility"}, "meta_data": {"anyOf": [{"type": "object"}, {"type": "null"}], "title": "Meta Data"}, "version": {"type": "integer", "title": "Version", "default": 1}, "enabled": {"type": "boolean", "title": "Enabled", "description": "\u662f\u5426\u542f\u7528\u8be5\u63d0\u793a\u8bcd", "default": false}, "team_id": {"anyOf": [{"type": "string", "format": "uuid"}, {"type": "null"}], "title": "Team Id"}, "tag_ids": {"anyOf": [{"items": {"type": "string", "format": "uuid"}, "type": "array"}, {"type": "null"}], "title": "Tag Ids"}}, "type": "object", "required": ["name", "content", "type", "visibility"], "title": "PromptCreate"}, "PromptReadWithTags": {"properties": {"name": {"type": "string", "title": "Name"}, "description": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Description"}, "content": {"type": "string", "title": "Content"}, "type": {"$ref": "#/components/schemas/PromptType"}, "input_vars": {"anyOf": [{"items": {"$ref": "#/components/schemas/InputVariable"}, "type": "array"}, {"type": "null"}], "title": "Input Vars"}, "visibility": {"$ref": "#/components/schemas/Visibility"}, "meta_data": {"anyOf": [{"type": "object"}, {"type": "null"}], "title": "Meta Data"}, "version": {"type": "integer", "title": "Version", "default": 1}, "enabled": {"type": "boolean", "title": "Enabled", "description": "\u662f\u5426\u542f\u7528\u8be5\u63d0\u793a\u8bcd", "default": false}, "team_id": {"anyOf": [{"type": "string", "format": "uuid"}, {"type": "null"}], "title": "Team Id"}, "id": {"type": "string", "format": "uuid", "title": "Id"}, "created_by": {"type": "string", "format": "uuid", "title": "Created By"}, "created_at": {"type": "string", "format": "date-time", "title": "Created At"}, "updated_at": {"type": "string", "format": "date-time", "title": "Updated At"}, "embedding": {"anyOf": [{"items": {"type": "number"}, "type": "array"}, {"type": "null"}], "title": "Embedding"}, "tags": {"items": {"$ref": "#/components/schemas/Tag"}, "type": "array", "title": "Tags", "default": []}}, "type": "object", "required": ["name", "content", "type", "visibility", "id", "created_by", "created_at", "updated_at"], "title": "PromptReadWithTags"}, "PromptType": {"type": "string", "enum": ["simple", "chat", "template", "system", "function"], "title": "PromptType"}, "PromptUpdate": {"properties": {"name": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Name"}, "description": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Description"}, "content": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Content"}, "type": {"anyOf": [{"$ref": "#/components/schemas/PromptType"}, {"type": "null"}]}, "input_vars": {"anyOf": [{"items": {"$ref": "#/components/schemas/InputVariable"}, "type": "array"}, {"type": "null"}], "title": "Input Vars"}, "visibility": {"anyOf": [{"$ref": "#/components/schemas/Visibility"}, {"type": "null"}]}, "team_id": {"anyOf": [{"type": "string", "format": "uuid"}, {"type": "null"}], "title": "Team Id"}, "meta_data": {"anyOf": [{"type": "object"}, {"type": "null"}], "title": "Meta Data"}, "enabled": {"anyOf": [{"type": "boolean"}, {"type": "null"}], "title": "Enabled"}, "tag_ids": {"anyOf": [{"items": {"type": "string", "format": "uuid"}, "type": "array"}, {"type": "null"}], "title": "Tag Ids"}}, "type": "object", "title": "PromptUpdate"}, "PromptVersion": {"properties": {"id": {"type": "string", "format": "uuid", "title": "Id"}, "prompt_id": {"type": "string", "format": "uuid", "title": "Prompt Id"}, "version": {"type": "integer", "title": "Version"}, "content": {"type": "string", "title": "Content"}, "input_vars": {"anyOf": [{"items": {"$ref": "#/components/schemas/InputVariable"}, "type": "array"}, {"type": "null"}], "title": "Input Vars"}, "created_by": {"type": "string", "format": "uuid", "title": "Created By"}, "created_at": {"type": "string", "format": "date-time", "title": "Created At"}, "change_notes": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Change Notes"}}, "type": "object", "required": ["prompt_id", "version", "content", "created_by"], "title": "PromptVersion"}, "PromptVersionCreate": {"properties": {"content": {"type": "string", "title": "Content"}, "input_vars": {"anyOf": [{"items": {"$ref": "#/components/schemas/InputVariable"}, "type": "array"}, {"type": "null"}], "title": "Input Vars"}, "change_notes": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Change Notes"}}, "type": "object", "required": ["content"], "title": "PromptVersionCreate"}, "Tag": {"properties": {"id": {"type": "string", "format": "uuid", "title": "Id"}, "name": {"type": "string", "title": "Name"}, "description": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Description"}, "color": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Color"}, "created_at": {"type": "string", "format": "date-time", "title": "Created At"}}, "type": "object", "required": ["name"], "title": "Tag"}, "TagCreate": {"properties": {"name": {"type": "string", "title": "Name"}, "description": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Description"}, "color": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Color"}}, "type": "object", "required": ["name"], "title": "TagCreate"}, "TagUpdate": {"properties": {"name": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Name"}, "description": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Description"}, "color": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Color"}}, "type": "object", "title": "TagUpdate"}, "Token": {"properties": {"access_token": {"type": "string", "title": "Access Token"}, "token_type": {"type": "string", "title": "Token Type", "default": "bearer"}}, "type": "object", "required": ["access_token"], "title": "Token"}, "UpdatePassword": {"properties": {"current_password": {"type": "string", "maxLength": 40, "minLength": 8, "title": "Current Password"}, "new_password": {"type": "string", "maxLength": 40, "minLength": 8, "title": "New Password"}}, "type": "object", "required": ["current_password", "new_password"], "title": "UpdatePassword"}, "UserCreate": {"properties": {"email": {"type": "string", "maxLength": 255, "format": "email", "title": "Email"}, "is_active": {"type": "boolean", "title": "Is Active", "default": true}, "is_superuser": {"type": "boolean", "title": "Is Superuser", "default": false}, "full_name": {"anyOf": [{"type": "string", "maxLength": 255}, {"type": "null"}], "title": "Full Name"}, "avatar_url": {"anyOf": [{"type": "string", "maxLength": 1024}, {"type": "null"}], "title": "Avatar Url"}, "is_setup_complete": {"type": "boolean", "title": "Is Setup Complete", "default": false}, "password": {"type": "string", "maxLength": 40, "minLength": 8, "title": "Password"}}, "type": "object", "required": ["password"], "title": "UserCreate"}, "UserPublic": {"properties": {"email": {"type": "string", "maxLength": 255, "format": "email", "title": "Email"}, "is_active": {"type": "boolean", "title": "Is Active", "default": true}, "is_superuser": {"type": "boolean", "title": "Is Superuser", "default": false}, "full_name": {"anyOf": [{"type": "string", "maxLength": 255}, {"type": "null"}], "title": "Full Name"}, "avatar_url": {"anyOf": [{"type": "string", "maxLength": 1024}, {"type": "null"}], "title": "Avatar Url"}, "is_setup_complete": {"type": "boolean", "title": "Is Setup Complete", "default": false}, "id": {"type": "string", "format": "uuid", "title": "Id"}}, "type": "object", "required": ["id"], "title": "UserPublic"}, "UserRegister": {"properties": {"email": {"type": "string", "maxLength": 255, "title": "Email"}, "password": {"type": "string", "maxLength": 40, "minLength": 8, "title": "Password"}, "full_name": {"anyOf": [{"type": "string", "maxLength": 255}, {"type": "null"}], "title": "Full Name"}}, "type": "object", "required": ["email", "password"], "title": "UserRegister"}, "UserUpdate": {"properties": {"email": {"anyOf": [{"type": "string", "maxLength": 255}, {"type": "null"}], "title": "Email"}, "is_active": {"type": "boolean", "title": "Is Active", "default": true}, "is_superuser": {"type": "boolean", "title": "Is Superuser", "default": false}, "full_name": {"anyOf": [{"type": "string", "maxLength": 255}, {"type": "null"}], "title": "Full Name"}, "avatar_url": {"anyOf": [{"type": "string", "maxLength": 1024}, {"type": "null"}], "title": "Avatar Url"}, "is_setup_complete": {"type": "boolean", "title": "Is Setup Complete", "default": false}, "password": {"anyOf": [{"type": "string", "maxLength": 40, "minLength": 8}, {"type": "null"}], "title": "Password"}}, "type": "object", "title": "UserUpdate"}, "UserUpdateMe": {"properties": {"full_name": {"anyOf": [{"type": "string", "maxLength": 255}, {"type": "null"}], "title": "Full Name"}, "email": {"anyOf": [{"type": "string", "maxLength": 255}, {"type": "null"}], "title": "Email"}, "is_setup_complete": {"anyOf": [{"type": "boolean"}, {"type": "null"}], "title": "Is Setup Complete"}}, "type": "object", "title": "UserUpdateMe"}, "UsersPublic": {"properties": {"data": {"items": {"$ref": "#/components/schemas/UserPublic"}, "type": "array", "title": "Data"}, "count": {"type": "integer", "title": "Count"}}, "type": "object", "required": ["data", "count"], "title": "UsersPublic"}, "ValidationError": {"properties": {"loc": {"items": {"anyOf": [{"type": "string"}, {"type": "integer"}]}, "type": "array", "title": "Location"}, "msg": {"type": "string", "title": "Message"}, "type": {"type": "string", "title": "Error Type"}}, "type": "object", "required": ["loc", "msg", "type"], "title": "ValidationError"}, "Visibility": {"type": "string", "enum": ["public", "private", "team"], "title": "Visibility"}}, "securitySchemes": {"OAuth2PasswordBearer": {"type": "oauth2", "flows": {"password": {"scopes": {}, "tokenUrl": "/api/v1/login/access-token"}}}}}}
