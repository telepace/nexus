// This file is auto-generated by @hey-api/openapi-ts

import {
  createClient,
  createConfig,
  type OptionsLegacyParser,
  urlSearchParamsBodySerializer,
} from "@hey-api/client-axios";
import type {
  LoginAccessTokenData,
  LoginAccessTokenError,
  LoginAccessTokenResponse,
  TestTokenResponse,
  RecoverPasswordData,
  RecoverPasswordError,
  RecoverPasswordResponse,
  ResetPasswordData,
  ResetPasswordError,
  ResetPasswordResponse,
  ReadUsersData,
  ReadUsersError,
  ReadUsersResponse,
  CreateUserData,
  CreateUserError,
  CreateUserResponse,
  ReadUserMeResponse,
  UpdateUserMeData,
  UpdateUserMeError,
  UpdateUserMeResponse,
  DeleteUserMeResponse,
  UpdatePasswordMeData,
  UpdatePasswordMeError,
  UpdatePasswordMeResponse,
  RegisterUserData,
  RegisterUserError,
  RegisterUserResponse,
  ReadUserByIdData,
  ReadUserByIdError,
  ReadUserByIdResponse,
  UpdateUserData,
  UpdateUserError,
  UpdateUserResponse,
  DeleteUserData,
  DeleteUserError,
  DeleteUserResponse,
  ReadItemsData,
  ReadItemsError,
  ReadItemsResponse,
  CreateItemData,
  CreateItemError,
  CreateItemResponse,
  ReadItemData,
  ReadItemError,
  ReadItemResponse,
  UpdateItemData,
  UpdateItemError,
  UpdateItemResponse,
  DeleteItemData,
  DeleteItemError,
  DeleteItemResponse,
} from "./types.gen";

export const client = createClient(createConfig());

/**
 * Login Access Token
 * OAuth2 compatible token login, get an access token for future requests
 */
export const loginAccessToken = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<LoginAccessTokenData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    LoginAccessTokenResponse,
    LoginAccessTokenError,
    ThrowOnError
  >({
    ...options,
    ...urlSearchParamsBodySerializer,
    headers: {
      "Content-Type": "application/x-www-form-urlencoded",
      ...options?.headers,
    },
    url: "/api/v1/login/access-token",
  });
};

/**
 * Test Token
 * Test access token
 */
export const testToken = <ThrowOnError extends boolean = false>(
  options?: OptionsLegacyParser<unknown, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    TestTokenResponse,
    unknown,
    ThrowOnError
  >({
    ...options,
    url: "/api/v1/login/test-token",
  });
};

/**
 * Recover Password
 * Password Recovery
 */
export const recoverPassword = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<RecoverPasswordData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    RecoverPasswordResponse,
    RecoverPasswordError,
    ThrowOnError
  >({
    ...options,
    url: "/api/v1/password-recovery/{email}",
  });
};

/**
 * Reset Password
 * Reset password
 */
export const resetPassword = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<ResetPasswordData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    ResetPasswordResponse,
    ResetPasswordError,
    ThrowOnError
  >({
    ...options,
    url: "/api/v1/reset-password/",
  });
};

/**
 * Read Users
 * Retrieve users
 */
export const readUsers = <ThrowOnError extends boolean = false>(
  options?: OptionsLegacyParser<ReadUsersData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    ReadUsersResponse,
    ReadUsersError,
    ThrowOnError
  >({
    ...options,
    url: "/api/v1/users/",
  });
};

/**
 * Create User
 * Create new user
 */
export const createUser = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<CreateUserData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    CreateUserResponse,
    CreateUserError,
    ThrowOnError
  >({
    ...options,
    url: "/api/v1/users/",
  });
};

/**
 * Read User Me
 * Get current user
 */
export const readUserMe = <ThrowOnError extends boolean = false>(
  options?: OptionsLegacyParser<unknown, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    ReadUserMeResponse,
    unknown,
    ThrowOnError
  >({
    ...options,
    url: "/api/v1/users/me",
  });
};

/**
 * Update User Me
 * Update own user
 */
export const updateUserMe = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<UpdateUserMeData, ThrowOnError>,
) => {
  return (options?.client ?? client).patch<
    UpdateUserMeResponse,
    UpdateUserMeError,
    ThrowOnError
  >({
    ...options,
    url: "/api/v1/users/me",
  });
};

/**
 * Delete User Me
 * Delete own user
 */
export const deleteUserMe = <ThrowOnError extends boolean = false>(
  options?: OptionsLegacyParser<unknown, ThrowOnError>,
) => {
  return (options?.client ?? client).delete<
    DeleteUserMeResponse,
    unknown,
    ThrowOnError
  >({
    ...options,
    url: "/api/v1/users/me",
  });
};

/**
 * Update Password Me
 * Update own password
 */
export const updatePasswordMe = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<UpdatePasswordMeData, ThrowOnError>,
) => {
  return (options?.client ?? client).patch<
    UpdatePasswordMeResponse,
    UpdatePasswordMeError,
    ThrowOnError
  >({
    ...options,
    url: "/api/v1/users/me/password",
  });
};

/**
 * Register User
 * Create new user without the need to be logged in
 */
export const registerUser = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<RegisterUserData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    RegisterUserResponse,
    RegisterUserError,
    ThrowOnError
  >({
    ...options,
    url: "/api/v1/users/signup",
  });
};

/**
 * Read User By Id
 * Get a specific user by id
 */
export const readUserById = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<ReadUserByIdData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    ReadUserByIdResponse,
    ReadUserByIdError,
    ThrowOnError
  >({
    ...options,
    url: "/api/v1/users/{user_id}",
  });
};

/**
 * Update User
 * Update a user
 */
export const updateUser = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<UpdateUserData, ThrowOnError>,
) => {
  return (options?.client ?? client).patch<
    UpdateUserResponse,
    UpdateUserError,
    ThrowOnError
  >({
    ...options,
    url: "/api/v1/users/{user_id}",
  });
};

/**
 * Delete User
 * Delete a user
 */
export const deleteUser = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<DeleteUserData, ThrowOnError>,
) => {
  return (options?.client ?? client).delete<
    DeleteUserResponse,
    DeleteUserError,
    ThrowOnError
  >({
    ...options,
    url: "/api/v1/users/{user_id}",
  });
};

/**
 * Read Items
 * Retrieve items
 */
export const readItems = <ThrowOnError extends boolean = false>(
  options?: OptionsLegacyParser<ReadItemsData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    ReadItemsResponse,
    ReadItemsError,
    ThrowOnError
  >({
    ...options,
    url: "/api/v1/items/",
  });
};

/**
 * Create Item
 * Create new item
 */
export const createItem = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<CreateItemData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    CreateItemResponse,
    CreateItemError,
    ThrowOnError
  >({
    ...options,
    url: "/api/v1/items/",
  });
};

/**
 * Read Item
 * Get item by ID
 */
export const readItem = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<ReadItemData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    ReadItemResponse,
    ReadItemError,
    ThrowOnError
  >({
    ...options,
    url: "/api/v1/items/{id}",
  });
};

/**
 * Update Item
 * Update an item
 */
export const updateItem = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<UpdateItemData, ThrowOnError>,
) => {
  return (options?.client ?? client).put<
    UpdateItemResponse,
    UpdateItemError,
    ThrowOnError
  >({
    ...options,
    url: "/api/v1/items/{id}",
  });
};

/**
 * Delete Item
 * Delete an item
 */
export const deleteItem = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<DeleteItemData, ThrowOnError>,
) => {
  return (options?.client ?? client).delete<
    DeleteItemResponse,
    DeleteItemError,
    ThrowOnError
  >({
    ...options,
    url: "/api/v1/items/{id}",
  });
};
