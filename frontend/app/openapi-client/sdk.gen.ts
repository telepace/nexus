// This file is auto-generated by @hey-api/openapi-ts

import {
  createClient,
  createConfig,
  type OptionsLegacyParser,
  urlSearchParamsBodySerializer,
} from "@hey-api/client-axios";
import type {
  HealthGetHealthApiError,
  HealthGetHealthApiResponse,
  LoginLoginAccessTokenData,
  LoginLoginAccessTokenError,
  LoginLoginAccessTokenResponse,
  LoginTestTokenError,
  LoginTestTokenResponse,
  LoginLogoutError,
  LoginLogoutResponse,
  LoginRecoverPasswordData,
  LoginRecoverPasswordError,
  LoginRecoverPasswordResponse,
  LoginResetPasswordData,
  LoginResetPasswordError,
  LoginResetPasswordResponse,
  LoginRecoverPasswordHtmlContentData,
  LoginRecoverPasswordHtmlContentError,
  LoginRecoverPasswordHtmlContentResponse,
  UsersReadUsersData,
  UsersReadUsersError,
  UsersReadUsersResponse,
  UsersCreateUserData,
  UsersCreateUserError,
  UsersCreateUserResponse,
  UsersReadUserMeError,
  UsersReadUserMeResponse,
  UsersDeleteUserMeError,
  UsersDeleteUserMeResponse,
  UsersUpdateUserMeData,
  UsersUpdateUserMeError,
  UsersUpdateUserMeResponse,
  UsersUpdatePasswordMeData,
  UsersUpdatePasswordMeError,
  UsersUpdatePasswordMeResponse,
  UsersRegisterUserData,
  UsersRegisterUserError,
  UsersRegisterUserResponse,
  UsersReadUserByIdData,
  UsersReadUserByIdError,
  UsersReadUserByIdResponse,
  UsersUpdateUserData,
  UsersUpdateUserError,
  UsersUpdateUserResponse,
  UsersDeleteUserData,
  UsersDeleteUserError,
  UsersDeleteUserResponse,
  UtilsTestEmailData,
  UtilsTestEmailError,
  UtilsTestEmailResponse,
  UtilsHealthCheckError,
  UtilsHealthCheckResponse,
  ItemsReadItemsData,
  ItemsReadItemsError,
  ItemsReadItemsResponse,
  ItemsCreateItemData,
  ItemsCreateItemError,
  ItemsCreateItemResponse,
  ItemsReadItemData,
  ItemsReadItemError,
  ItemsReadItemResponse,
  ItemsUpdateItemData,
  ItemsUpdateItemError,
  ItemsUpdateItemResponse,
  ItemsDeleteItemData,
  ItemsDeleteItemError,
  ItemsDeleteItemResponse,
  GoogleOauthGoogleCallbackApiData,
  GoogleOauthGoogleCallbackApiError,
  GoogleOauthGoogleCallbackApiResponse,
  GoogleOauthGoogleLoginData,
  GoogleOauthGoogleLoginError,
  GoogleOauthGoogleLoginResponse,
  GoogleOauthGoogleCallbackData,
  GoogleOauthGoogleCallbackError,
  GoogleOauthGoogleCallbackResponse,
  PromptsReadTagsData,
  PromptsReadTagsError,
  PromptsReadTagsResponse,
  PromptsCreateTagData,
  PromptsCreateTagError,
  PromptsCreateTagResponse,
  PromptsUpdateTagData,
  PromptsUpdateTagError,
  PromptsUpdateTagResponse,
  PromptsDeleteTagData,
  PromptsDeleteTagError,
  PromptsDeleteTagResponse,
  PromptsCreatePromptData,
  PromptsCreatePromptError,
  PromptsCreatePromptResponse,
  PromptsReadPromptsData,
  PromptsReadPromptsError,
  PromptsReadPromptsResponse,
  PromptsReadPromptData,
  PromptsReadPromptError,
  PromptsReadPromptResponse,
  PromptsUpdatePromptData,
  PromptsUpdatePromptError,
  PromptsUpdatePromptResponse,
  PromptsDeletePromptData,
  PromptsDeletePromptError,
  PromptsDeletePromptResponse,
  PromptsReadPromptVersionsData,
  PromptsReadPromptVersionsError,
  PromptsReadPromptVersionsResponse,
  PromptsCreatePromptVersionData,
  PromptsCreatePromptVersionError,
  PromptsCreatePromptVersionResponse,
  PromptsReadPromptVersionData,
  PromptsReadPromptVersionError,
  PromptsReadPromptVersionResponse,
  PromptsDuplicatePromptData,
  PromptsDuplicatePromptError,
  PromptsDuplicatePromptResponse,
  LlmCreateCompletionData,
  LlmCreateCompletionError,
  LlmCreateCompletionResponse,
  LlmCreateEmbeddingData,
  LlmCreateEmbeddingError,
  LlmCreateEmbeddingResponse,
  ContentCreateContentItemEndpointData,
  ContentCreateContentItemEndpointError,
  ContentCreateContentItemEndpointResponse,
  ContentListContentItemsEndpointData,
  ContentListContentItemsEndpointError,
  ContentListContentItemsEndpointResponse,
  ContentGetContentItemEndpointData,
  ContentGetContentItemEndpointError,
  ContentGetContentItemEndpointResponse,
  PrivateCreateUserData,
  PrivateCreateUserError,
  PrivateCreateUserResponse,
} from "./types.gen";

export const client = createClient(createConfig());

/**
 * Get Health Api
 */
export const healthGetHealthApi = <ThrowOnError extends boolean = false>(
  options?: OptionsLegacyParser<unknown, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    HealthGetHealthApiResponse,
    HealthGetHealthApiError,
    ThrowOnError
  >({
    ...options,
    url: "/api/v1/health",
  });
};

/**
 * Login Access Token
 * OAuth2 compatible token login, get an access token for future requests
 */
export const loginLoginAccessToken = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<LoginLoginAccessTokenData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    LoginLoginAccessTokenResponse,
    LoginLoginAccessTokenError,
    ThrowOnError
  >({
    ...options,
    ...urlSearchParamsBodySerializer,
    headers: {
      "Content-Type": "application/x-www-form-urlencoded",
      ...options?.headers,
    },
    url: "/api/v1/login/access-token",
  });
};

/**
 * Test Token
 * Test access token
 */
export const loginTestToken = <ThrowOnError extends boolean = false>(
  options?: OptionsLegacyParser<unknown, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    LoginTestTokenResponse,
    LoginTestTokenError,
    ThrowOnError
  >({
    ...options,
    url: "/api/v1/login/test-token",
  });
};

/**
 * Logout
 * Logout current user
 *
 * This endpoint invalidates the current token by adding it to a blacklist.
 * The frontend should still remove the tokens from local storage after calling this endpoint.
 */
export const loginLogout = <ThrowOnError extends boolean = false>(
  options?: OptionsLegacyParser<unknown, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    LoginLogoutResponse,
    LoginLogoutError,
    ThrowOnError
  >({
    ...options,
    url: "/api/v1/logout",
  });
};

/**
 * Recover Password
 * Password Recovery
 */
export const loginRecoverPassword = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<LoginRecoverPasswordData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    LoginRecoverPasswordResponse,
    LoginRecoverPasswordError,
    ThrowOnError
  >({
    ...options,
    url: "/api/v1/password-recovery/{email}",
  });
};

/**
 * Reset Password
 * Reset password
 */
export const loginResetPassword = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<LoginResetPasswordData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    LoginResetPasswordResponse,
    LoginResetPasswordError,
    ThrowOnError
  >({
    ...options,
    url: "/api/v1/reset-password/",
  });
};

/**
 * Recover Password Html Content
 * HTML Content for Password Recovery
 */
export const loginRecoverPasswordHtmlContent = <
  ThrowOnError extends boolean = false,
>(
  options: OptionsLegacyParser<
    LoginRecoverPasswordHtmlContentData,
    ThrowOnError
  >,
) => {
  return (options?.client ?? client).post<
    LoginRecoverPasswordHtmlContentResponse,
    LoginRecoverPasswordHtmlContentError,
    ThrowOnError
  >({
    ...options,
    url: "/api/v1/password-recovery-html-content/{email}",
  });
};

/**
 * Read Users
 * Retrieve users.
 */
export const usersReadUsers = <ThrowOnError extends boolean = false>(
  options?: OptionsLegacyParser<UsersReadUsersData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    UsersReadUsersResponse,
    UsersReadUsersError,
    ThrowOnError
  >({
    ...options,
    url: "/api/v1/users/",
  });
};

/**
 * Create User
 * Create new user.
 */
export const usersCreateUser = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<UsersCreateUserData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    UsersCreateUserResponse,
    UsersCreateUserError,
    ThrowOnError
  >({
    ...options,
    url: "/api/v1/users/",
  });
};

/**
 * Read User Me
 * Get current user.
 */
export const usersReadUserMe = <ThrowOnError extends boolean = false>(
  options?: OptionsLegacyParser<unknown, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    UsersReadUserMeResponse,
    UsersReadUserMeError,
    ThrowOnError
  >({
    ...options,
    url: "/api/v1/users/me",
  });
};

/**
 * Delete User Me
 * Delete own user.
 */
export const usersDeleteUserMe = <ThrowOnError extends boolean = false>(
  options?: OptionsLegacyParser<unknown, ThrowOnError>,
) => {
  return (options?.client ?? client).delete<
    UsersDeleteUserMeResponse,
    UsersDeleteUserMeError,
    ThrowOnError
  >({
    ...options,
    url: "/api/v1/users/me",
  });
};

/**
 * Update User Me
 * Update own user.
 */
export const usersUpdateUserMe = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<UsersUpdateUserMeData, ThrowOnError>,
) => {
  return (options?.client ?? client).patch<
    UsersUpdateUserMeResponse,
    UsersUpdateUserMeError,
    ThrowOnError
  >({
    ...options,
    url: "/api/v1/users/me",
  });
};

/**
 * Update Password Me
 * Update own password.
 */
export const usersUpdatePasswordMe = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<UsersUpdatePasswordMeData, ThrowOnError>,
) => {
  return (options?.client ?? client).patch<
    UsersUpdatePasswordMeResponse,
    UsersUpdatePasswordMeError,
    ThrowOnError
  >({
    ...options,
    url: "/api/v1/users/me/password",
  });
};

/**
 * Register User
 * Create new user without the need to be logged in.
 */
export const usersRegisterUser = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<UsersRegisterUserData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    UsersRegisterUserResponse,
    UsersRegisterUserError,
    ThrowOnError
  >({
    ...options,
    url: "/api/v1/users/signup",
  });
};

/**
 * Read User By Id
 * Get a specific user by id.
 */
export const usersReadUserById = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<UsersReadUserByIdData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    UsersReadUserByIdResponse,
    UsersReadUserByIdError,
    ThrowOnError
  >({
    ...options,
    url: "/api/v1/users/{user_id}",
  });
};

/**
 * Update User
 * Update a user.
 */
export const usersUpdateUser = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<UsersUpdateUserData, ThrowOnError>,
) => {
  return (options?.client ?? client).patch<
    UsersUpdateUserResponse,
    UsersUpdateUserError,
    ThrowOnError
  >({
    ...options,
    url: "/api/v1/users/{user_id}",
  });
};

/**
 * Delete User
 * Delete a user.
 */
export const usersDeleteUser = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<UsersDeleteUserData, ThrowOnError>,
) => {
  return (options?.client ?? client).delete<
    UsersDeleteUserResponse,
    UsersDeleteUserError,
    ThrowOnError
  >({
    ...options,
    url: "/api/v1/users/{user_id}",
  });
};

/**
 * Test Email
 * Test emails.
 */
export const utilsTestEmail = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<UtilsTestEmailData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    UtilsTestEmailResponse,
    UtilsTestEmailError,
    ThrowOnError
  >({
    ...options,
    url: "/api/v1/utils/test-email/",
  });
};

/**
 * Health Check
 */
export const utilsHealthCheck = <ThrowOnError extends boolean = false>(
  options?: OptionsLegacyParser<unknown, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    UtilsHealthCheckResponse,
    UtilsHealthCheckError,
    ThrowOnError
  >({
    ...options,
    url: "/api/v1/utils/health-check/",
  });
};

/**
 * Read Items
 * Retrieve items.
 */
export const itemsReadItems = <ThrowOnError extends boolean = false>(
  options?: OptionsLegacyParser<ItemsReadItemsData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    ItemsReadItemsResponse,
    ItemsReadItemsError,
    ThrowOnError
  >({
    ...options,
    url: "/api/v1/items/",
  });
};

/**
 * Create Item
 * Create new item.
 */
export const itemsCreateItem = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<ItemsCreateItemData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    ItemsCreateItemResponse,
    ItemsCreateItemError,
    ThrowOnError
  >({
    ...options,
    url: "/api/v1/items/",
  });
};

/**
 * Read Item
 * Get item by ID.
 */
export const itemsReadItem = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<ItemsReadItemData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    ItemsReadItemResponse,
    ItemsReadItemError,
    ThrowOnError
  >({
    ...options,
    url: "/api/v1/items/{id}",
  });
};

/**
 * Update Item
 * Update an item.
 */
export const itemsUpdateItem = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<ItemsUpdateItemData, ThrowOnError>,
) => {
  return (options?.client ?? client).put<
    ItemsUpdateItemResponse,
    ItemsUpdateItemError,
    ThrowOnError
  >({
    ...options,
    url: "/api/v1/items/{id}",
  });
};

/**
 * Delete Item
 * Delete an item.
 */
export const itemsDeleteItem = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<ItemsDeleteItemData, ThrowOnError>,
) => {
  return (options?.client ?? client).delete<
    ItemsDeleteItemResponse,
    ItemsDeleteItemError,
    ThrowOnError
  >({
    ...options,
    url: "/api/v1/items/{id}",
  });
};

/**
 * Google Callback Api
 * Handle Google OAuth callback from frontend
 * This is maintained for backward compatibility but not used in the new flow
 */
export const googleOauthGoogleCallbackApi = <
  ThrowOnError extends boolean = false,
>(
  options: OptionsLegacyParser<GoogleOauthGoogleCallbackApiData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    GoogleOauthGoogleCallbackApiResponse,
    GoogleOauthGoogleCallbackApiError,
    ThrowOnError
  >({
    ...options,
    url: "/api/v1/auth/google-callback",
  });
};

/**
 * Google Login
 * Initiate Google OAuth2 authentication flow
 * This endpoint redirects to Google's login page
 */
export const googleOauthGoogleLogin = <ThrowOnError extends boolean = false>(
  options?: OptionsLegacyParser<GoogleOauthGoogleLoginData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GoogleOauthGoogleLoginResponse,
    GoogleOauthGoogleLoginError,
    ThrowOnError
  >({
    ...options,
    url: "/api/v1/login/google",
  });
};

/**
 * Google Callback
 * Handle the callback from Google OAuth
 * This endpoint is called by Google after the user has logged in
 */
export const googleOauthGoogleCallback = <ThrowOnError extends boolean = false>(
  options?: OptionsLegacyParser<GoogleOauthGoogleCallbackData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GoogleOauthGoogleCallbackResponse,
    GoogleOauthGoogleCallbackError,
    ThrowOnError
  >({
    ...options,
    url: "/api/v1/login/google/callback",
  });
};

/**
 * Read Tags
 * 获取标签列表
 */
export const promptsReadTags = <ThrowOnError extends boolean = false>(
  options?: OptionsLegacyParser<PromptsReadTagsData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    PromptsReadTagsResponse,
    PromptsReadTagsError,
    ThrowOnError
  >({
    ...options,
    url: "/api/v1/prompts/tags",
  });
};

/**
 * Create Tag
 * 创建新标签
 */
export const promptsCreateTag = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<PromptsCreateTagData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    PromptsCreateTagResponse,
    PromptsCreateTagError,
    ThrowOnError
  >({
    ...options,
    url: "/api/v1/prompts/tags",
  });
};

/**
 * Update Tag
 * 更新标签
 */
export const promptsUpdateTag = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<PromptsUpdateTagData, ThrowOnError>,
) => {
  return (options?.client ?? client).put<
    PromptsUpdateTagResponse,
    PromptsUpdateTagError,
    ThrowOnError
  >({
    ...options,
    url: "/api/v1/prompts/tags/{tag_id}",
  });
};

/**
 * Delete Tag
 * 删除标签 (需要超级用户权限)
 */
export const promptsDeleteTag = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<PromptsDeleteTagData, ThrowOnError>,
) => {
  return (options?.client ?? client).delete<
    PromptsDeleteTagResponse,
    PromptsDeleteTagError,
    ThrowOnError
  >({
    ...options,
    url: "/api/v1/prompts/tags/{tag_id}",
  });
};

/**
 * Create Prompt
 * 创建新的提示词
 */
export const promptsCreatePrompt = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<PromptsCreatePromptData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    PromptsCreatePromptResponse,
    PromptsCreatePromptError,
    ThrowOnError
  >({
    ...options,
    url: "/api/v1/prompts/",
  });
};

/**
 * Read Prompts
 * Read and return a list of prompts based on specified filters and sorting.
 *
 * The function constructs a query to retrieve prompts from the database, applying
 * optional filters for tag IDs, search terms, and sorting by creation or update
 * time. It also handles pagination through skip and limit parameters. Tags are
 * manually loaded for each prompt after querying.
 *
 * Args:
 * db (Session): Database session.
 * _current_user (Any): Current user information (dependency).
 * skip (int?): Number of records to skip. Defaults to 0.
 * limit (int?): Maximum number of records to return. Defaults to 100.
 * tag_ids (list[UUID] | None?): List of UUIDs for tags to filter prompts by.
 * search (str | None?): Search term to filter prompts by name, description, or content.
 * sort (str | None?): Field to sort the results by ('created_at' or 'updated_at'). Defaults to None.
 * order (str?): Order of sorting ('asc' or 'desc'). Defaults to "desc".
 *
 * Returns:
 * list[Prompt]: List of prompts matching the filters and sorted as specified.
 *
 * Raises:
 * HTTPException: If an error occurs during database query execution.
 */
export const promptsReadPrompts = <ThrowOnError extends boolean = false>(
  options?: OptionsLegacyParser<PromptsReadPromptsData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    PromptsReadPromptsResponse,
    PromptsReadPromptsError,
    ThrowOnError
  >({
    ...options,
    url: "/api/v1/prompts/",
  });
};

/**
 * Read Prompt
 * 获取提示词详情
 */
export const promptsReadPrompt = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<PromptsReadPromptData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    PromptsReadPromptResponse,
    PromptsReadPromptError,
    ThrowOnError
  >({
    ...options,
    url: "/api/v1/prompts/{prompt_id}",
  });
};

/**
 * Update Prompt
 * Update a prompt by its ID.
 *
 * This function updates the prompt in the database with new data provided. It
 * checks for permissions, updates other fields, and handles version creation if
 * specified. It also manages tag relationships by updating or clearing them as
 * needed.
 *
 * Args:
 * db (Session): The database session.
 * prompt_id (UUID): The ID of the prompt to update.
 * prompt_in (PromptUpdate): The data containing the new values for the prompt.
 * current_user (Any): The current user making the request.
 * create_version (bool): A flag indicating whether to create a new version.
 *
 * Returns:
 * PromptReadWithTags: The updated prompt with tags included.
 *
 * Raises:
 * HTTPException: If the prompt is not found, the user lacks permissions,
 * or an error occurs during the update process.
 */
export const promptsUpdatePrompt = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<PromptsUpdatePromptData, ThrowOnError>,
) => {
  return (options?.client ?? client).put<
    PromptsUpdatePromptResponse,
    PromptsUpdatePromptError,
    ThrowOnError
  >({
    ...options,
    url: "/api/v1/prompts/{prompt_id}",
  });
};

/**
 * Delete Prompt
 * 删除提示词
 */
export const promptsDeletePrompt = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<PromptsDeletePromptData, ThrowOnError>,
) => {
  return (options?.client ?? client).delete<
    PromptsDeletePromptResponse,
    PromptsDeletePromptError,
    ThrowOnError
  >({
    ...options,
    url: "/api/v1/prompts/{prompt_id}",
  });
};

/**
 * Read Prompt Versions
 * Retrieves the version history of a given prompt.
 *
 * This function fetches the version history for a specified prompt by its ID. It
 * first retrieves the prompt from the database and checks if it exists. Then, it
 * verifies the user's permissions to access the prompt. If both steps are
 * successful, it queries the database to get all versions of the prompt, sorted
 * in descending order by version number. If any errors occur during this process,
 * appropriate HTTP exceptions are raised.
 *
 * Args:
 * db (Session): The database session.
 * prompt_id (UUID): The ID of the prompt for which to retrieve version history.
 * current_user (Any): The current authenticated user.
 */
export const promptsReadPromptVersions = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<PromptsReadPromptVersionsData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    PromptsReadPromptVersionsResponse,
    PromptsReadPromptVersionsError,
    ThrowOnError
  >({
    ...options,
    url: "/api/v1/prompts/{prompt_id}/versions",
  });
};

/**
 * Create Prompt Version
 * Creates a new version of a prompt.
 *
 * This function retrieves the prompt by its ID, checks for access permissions,
 * determines the maximum existing version number, and then creates a new version
 * with incremented version number, content, change notes, creation time, and
 * creator ID. It handles exceptions by logging errors and raising HTTP
 * exceptions.
 */
export const promptsCreatePromptVersion = <
  ThrowOnError extends boolean = false,
>(
  options: OptionsLegacyParser<PromptsCreatePromptVersionData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    PromptsCreatePromptVersionResponse,
    PromptsCreatePromptVersionError,
    ThrowOnError
  >({
    ...options,
    url: "/api/v1/prompts/{prompt_id}/versions",
  });
};

/**
 * Read Prompt Version
 * 获取提示词特定版本
 */
export const promptsReadPromptVersion = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<PromptsReadPromptVersionData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    PromptsReadPromptVersionResponse,
    PromptsReadPromptVersionError,
    ThrowOnError
  >({
    ...options,
    url: "/api/v1/prompts/{prompt_id}/versions/{version_num}",
  });
};

/**
 * Duplicate Prompt
 * Duplicates a prompt based on the provided prompt ID.
 *
 * This function retrieves the original prompt, checks for access permissions,
 * creates a new duplicate with updated attributes such as name and visibility,
 * copies associated tags, and initializes a new version for the duplicated
 * prompt. If any errors occur during the process, it rolls back the database
 * transaction and raises an appropriate HTTP exception.
 *
 * Args:
 * db (Session): The database session dependency.
 * prompt_id (UUID): The ID of the original prompt to be duplicated.
 * current_user (Any): The current user making the request.
 */
export const promptsDuplicatePrompt = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<PromptsDuplicatePromptData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    PromptsDuplicatePromptResponse,
    PromptsDuplicatePromptError,
    ThrowOnError
  >({
    ...options,
    url: "/api/v1/prompts/{prompt_id}/duplicate",
  });
};

/**
 * Create Completion
 * Handles creation of completions based on request data.
 */
export const llmCreateCompletion = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<LlmCreateCompletionData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    LlmCreateCompletionResponse,
    LlmCreateCompletionError,
    ThrowOnError
  >({
    ...options,
    url: "/api/v1/llm/completions",
  });
};

/**
 * Create Embedding
 * Handles the creation of embeddings by forwarding a request to LiteLLM.
 */
export const llmCreateEmbedding = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<LlmCreateEmbeddingData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    LlmCreateEmbeddingResponse,
    LlmCreateEmbeddingError,
    ThrowOnError
  >({
    ...options,
    url: "/api/v1/llm/embeddings",
  });
};

/**
 * Create a New Content Item
 * Uploads and creates a new content item in the system. Requires user authentication.
 */
export const contentCreateContentItemEndpoint = <
  ThrowOnError extends boolean = false,
>(
  options: OptionsLegacyParser<
    ContentCreateContentItemEndpointData,
    ThrowOnError
  >,
) => {
  return (options?.client ?? client).post<
    ContentCreateContentItemEndpointResponse,
    ContentCreateContentItemEndpointError,
    ThrowOnError
  >({
    ...options,
    url: "/api/v1/content/create",
  });
};

/**
 * List Content Items
 * Retrieves a list of content items, with optional pagination and user filtering.
 */
export const contentListContentItemsEndpoint = <
  ThrowOnError extends boolean = false,
>(
  options?: OptionsLegacyParser<
    ContentListContentItemsEndpointData,
    ThrowOnError
  >,
) => {
  return (options?.client ?? client).get<
    ContentListContentItemsEndpointResponse,
    ContentListContentItemsEndpointError,
    ThrowOnError
  >({
    ...options,
    url: "/api/v1/content",
  });
};

/**
 * Get a Specific Content Item
 * Retrieves a single content item by its unique ID.
 */
export const contentGetContentItemEndpoint = <
  ThrowOnError extends boolean = false,
>(
  options: OptionsLegacyParser<ContentGetContentItemEndpointData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    ContentGetContentItemEndpointResponse,
    ContentGetContentItemEndpointError,
    ThrowOnError
  >({
    ...options,
    url: "/api/v1/content/{id}",
  });
};

/**
 * Create User
 * Create a new user.
 */
export const privateCreateUser = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<PrivateCreateUserData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    PrivateCreateUserResponse,
    PrivateCreateUserError,
    ThrowOnError
  >({
    ...options,
    url: "/api/v1/private/users/",
  });
};
